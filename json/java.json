[
    {
        "id": "01",
        "titulo": "Calculadora básica interactiva",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado CalculadoraBasica.java que simule una calculadora básica capaz de realizar operaciones aritméticas elementales: suma, resta, multiplicación y división. El programa debe solicitar al usuario dos números enteros y un operador (+, -, *, /), y mostrar el resultado correspondiente. Si se intenta dividir entre cero, debe indicarse un error.",
        "tareas": [
            "Pedir al usuario dos números enteros.",
            "Pedir al usuario el operador (+, -, *, /).",
            "Realizar la operación aritmética según el operador.",
            "Mostrar el resultado o un mensaje de error si se divide entre cero."
        ],
        "pistas": [
            "Usa estructuras como if-else if-else o switch case para controlar el flujo del programa.",
            "Comprueba si el segundo número es cero antes de realizar la división."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce el primer número: 10",
                "Introduce el segundo número: 5",
                "Introduce el operador (+, -, *, /): *",
                "Introduce el primer número: 8",
                "Introduce el segundo número: 0",
                "Introduce el operador (+, -, *, /): /"
            ],
            "salida": [
                "Resultado: 50",
                "Error: División por cero no permitida."
            ]
        }
    },
    {
        "id": "02",
        "titulo": "Reloj binario",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado RelojBinario.java que lea una hora del día en formato de 24 horas (por ejemplo, \"13:45\") y la convierta a una representación binaria separando las horas y minutos. La salida debe mostrar los bits correspondientes a cada número, alineados como si fuese un reloj binario visual.",
        "tareas": [
            "Leer una hora con el formato HH:mm.",
            "Separar la hora y los minutos.",
            "Convertir cada número a binario con ceros a la izquierda (8 bits).",
            "Mostrar la representación binaria de la hora y de los minutos por separado."
        ],
        "pistas": [
            "Puedes usar Integer.toBinaryString y añadir ceros manualmente si faltan.",
            "Valida que la hora esté entre 00:00 y 23:59.",
            "Utiliza métodos como split para separar la hora y los minutos."
        ],
        "ejemplo": {
            "entrada": "Introduce la hora en formato HH:mm: 13:45",
            "salida": [
                "Hora en binario:    00001101",
                "Minutos en binario: 00101101"
            ]
        }
    },
    {
        "id": "03",
        "titulo": "Tabla del clima semanal",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Desarrolla un programa llamado TablaDelClima.java que pida al usuario registrar las temperaturas de los próximos 7 días y luego imprima una tabla mostrando cada día y su temperatura, así como el promedio final.",
        "tareas": [
            "Pedir al usuario ingresar 7 temperaturas, una por cada día de la semana.",
            "Guardar las temperaturas en un array.",
            "Mostrar una tabla con los días (de lunes a domingo) y sus temperaturas.",
            "Calcular y mostrar el promedio semanal de las temperaturas."
        ],
        "pistas": [
            "Usa un array de enteros para almacenar las temperaturas.",
            "Valida que cada temperatura esté entre -50 y 50 grados.",
            "El promedio debe tener al menos una cifra decimal.",
            "Puedes usar un array de cadenas para los nombres de los días de la semana."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce la temperatura del lunes: 23",
                "Introduce la temperatura del martes: 21",
                "..."
            ],
            "salida": [
                "Día        Temperatura",
                "Lunes      23°C",
                "Martes     21°C",
                "...",
                "Promedio semanal: 22.7°C"
            ]
        }
    },
    {
        "id": "04",
        "titulo": "Patrón serpiente",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado PatronSerpiente.java que reciba como entrada un número entero positivo N e imprima un patrón de serpiente de NxN valores, donde las filas pares se imprimen de izquierda a derecha y las impares de derecha a izquierda. Se numeran las posiciones desde 1 hasta N×N.",
        "tareas": [
            "Leer el tamaño N (entero positivo).",
            "Imprimir una tabla de NxN con números del 1 al N² en forma de serpiente.",
            "Alternar el orden de impresión de cada fila."
        ],
        "pistas": [
            "Valida que N sea un número positivo.",
            "Usa bucles anidados para generar e imprimir la matriz.",
            "Asegura la alineación correcta para números de varias cifras.",
            "Evita el uso de librerías externas.",
            "Puede usar una matriz bidimensional para guardar los valores de NxN."
        ],
        "ejemplo": {
            "entrada": "Introduce el tamaño de la serpiente: 4",
            "salida": [
                "1   2   3   4",
                "8   7   6   5",
                "9  10  11  12",
                "16 15  14  13"
            ]
        }
    },
    {
        "id": "05",
        "titulo": "Número en palabras",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Desarrolla un programa llamado NumeroEnPalabras.java que lea un número entero entre 0 y 99 y lo traduzca a palabras en español. Este programa es ideal para trabajar con estructuras condicionales y control de flujo. Debe contemplar los casos especiales del idioma español, como \"veintiuno\" en lugar de \"veinte y uno\".",
        "tareas": [
            "Leer un número entero entre 0 y 99.",
            "Convertir el número a su representación textual en español.",
            "Mostrar la palabra correspondiente en pantalla."
        ],
        "pistas": [
            "Maneja correctamente casos especiales: 0, del 10 al 15, del 20 al 29, etc.",
            "Usa condicionales anidados y estructuras de control.",
            "No utilices arrays predefinidos con todas las combinaciones; implementa la lógica.",
            "No se permite usar switch-case."
        ],
        "ejemplo": {
            "entrada": "Introduce un número entre 0 y 99: 42",
            "salida": [
                "Resultado: cuarenta y dos"
            ]
        }
    },
    {
        "id": "06",
        "titulo": "Número feliz",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Un número entero positivo se llama feliz si, al reemplazarlo por la suma de los cuadrados de sus dígitos y repetir este proceso, eventualmente se llega al número 1. Si se entra en un ciclo que no incluye al 1, entonces no es feliz. Escribe un programa NumeroFeliz.java que lea un número positivo e indique si es un número feliz o no, mostrando además la secuencia generada.",
        "tareas": [
            "Validar que el número sea positivo.",
            "Leer un número entero positivo.",
            "Generar la secuencia sumando los cuadrados de los dígitos del número.",
            "Detenerse si se llega a 1 o si la secuencia repite un número (ciclo).",
            "Mostrar la secuencia generada y el resultado indicando si es feliz o no."
        ],
        "pistas": [
            "No uses estructuras como Set o Map para detectar ciclos.",
            "Puedes almacenar la secuencia en un array o concatenar la secuencia como texto.",
            "Evita usar librerías externas."
        ],
        "ejemplo": {
            "entrada": "Introduce un número: 19",
            "salida": [
                "Secuencia: 19 -> 82 -> 68 -> 100 -> 1",
                "Resultado: Es un número feliz."
            ]
        }
    },
    {
        "id": "07",
        "titulo": "Marcador inverso",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Se ha perdido el marcador original de una competición y solo queda el marcador invertido, en el que los dígitos están en orden inverso y separados por un guion. Por ejemplo, si aparece \"3-2\" realmente era \"2-3\". Crea un programa MarcadorInverso.java que lea una entrada como \"4-1\", la invierta y diga quién ganó (equipo A o B, o empate).",
        "tareas": [
            "Leer un marcador como texto con formato \"X-Y\".",
            "Invertir el orden para obtener el marcador real.",
            "Mostrar el marcador real y el resultado: Gana el equipo A, Gana el equipo B o Empate."
        ],
        "pistas": [
            "Validar que ambos valores sean enteros positivos.",
            "Usar split() para separar los valores y Integer.parseInt para convertirlos.",
            "No utilizar estructuras complejas."
        ],
        "ejemplo": {
            "entrada": "Introduce el marcador (invertido): 1-2",
            "salida": [
                "Marcador real: 2-1",
                "Resultado: Gana el equipo A"
            ]
        }
    },
    {
        "id": "08",
        "titulo": "Clave intercalada",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Una técnica de codificación básica intercalaba una palabra con una clave del mismo tamaño, letra por letra. Por ejemplo, la palabra \"HOLA\" con la clave \"CLAV\" se convierte en \"HCLOLAVA\". Crea un programa ClaveIntercalada.java que reciba dos palabras del mismo tamaño y genere la palabra intercalada como resultado.",
        "tareas": [
            "Leer dos palabras de igual longitud.",
            "Intercalar sus caracteres alternando uno de la primera, uno de la segunda, otro de la segunda, otro de la primera, etc.",
            "Mostrar la palabra resultante."
        ],
        "pistas": [
            "Validar que ambas palabras tengan la misma longitud.",
            "Mostrar un mensaje de error si no cumplen la condición.",
            "No usar estructuras avanzadas."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce la primera palabra: RANA",
                "Introduce la segunda palabra: SOLA"
            ],
            "salida": [
                "Resultado: RSOANLAA"
            ]
        }
    },
    {
        "id": "09",
        "titulo": "Divisores primos",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa DivisoresPrimos.java que reciba un número entero positivo y muestre una lista de todos sus divisores primos sin repetir. El programa debe calcular cada divisor y verificar si es primo, sin usar listas predefinidas de primos. Se trata de comprender divisibilidad y optimización con bucles.",
        "tareas": [
            "Leer un número entero positivo.",
            "Encontrar todos los divisores del número.",
            "Filtrar solo los divisores que son números primos.",
            "Mostrar los divisores primos sin repetir."
        ],
        "pistas": [
            "Crear una función auxiliar para comprobar si un número es primo.",
            "No repetir divisores en la salida.",
            "No usar librerías externas."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce un número: 60"
            ],
            "salida": [
                "Divisores primos únicos: 2, 3, 5"
            ]
        }
    },
    {
        "id": "10",
        "titulo": "Sílabas abiertas",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Una sílaba abierta en español es aquella que termina en vocal (por ejemplo, \"ma\", \"te\", \"lu\"). Escribe un programa SilabasAbiertas.java que lea una palabra y cuente cuántas sílabas abiertas tiene. Para simplificar, asumiremos que cada sílaba es un par de letras y que hay tantas sílabas como pares posibles, descartando la última si la longitud es impar.",
        "tareas": [
            "Leer una palabra.",
            "Dividir la palabra en pares de letras (de 2 en 2).",
            "Contar cuántos pares terminan en vocal."
        ],
        "pistas": [
            "Considerar las vocales a, e, i, o, u.",
            "Convertir la palabra a minúsculas antes de procesar.",
            "Solo contar pares completos, ignorar letra sobrante si la longitud es impar.",
            "Usar bucles anidados para dividir los pares."
        ],
        "ejemplo": {
            "entrada": "tomate",
            "salida": "Sílabas abiertas: 3 (to, ma, te)"
        }
    },
    {
        "id": "11",
        "titulo": "Eco infinito",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Un servicio secreto utiliza un sistema de eco infinito para reforzar la confidencialidad de los mensajes: cada palabra del mensaje original se repite una vez más que la anterior, comenzando con una única repetición. Por ejemplo, el mensaje \"hola mundo clave\" se transforma en \"hola mundo mundo clave clave clave\". Crea un programa EcoInfinito.java que tome un mensaje y construya su eco según esta lógica.",
        "tareas": [
            "Leer una línea de texto (mensaje original).",
            "Repetir cada palabra tantas veces como su posición (1ª = 1, 2ª = 2, etc.).",
            "Mostrar el resultado en una sola línea."
        ],
        "pistas": [
            "Separar palabras con split(\" \").",
            "Generar la repetición con un bucle simple.",
            "Conservar el orden de las palabras."
        ],
        "ejemplo": {
            "entrada": "hola mundo clave",
            "salida": "hola mundo mundo clave clave clave"
        }
    },
    {
        "id": "12",
        "titulo": "Factorial truncado",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "El factorial de un número n es el producto de todos los enteros positivos menores o iguales a n. Este programa FactorialTruncado.java debe calcular el factorial, pero truncando el resultado al primer dígito impar encontrado de derecha a izquierda. Si el resultado termina en ceros o pares, se eliminan hasta encontrar un impar.",
        "tareas": [
            "Leer un entero no negativo.",
            "Calcular el factorial.",
            "Eliminar los dígitos pares y ceros del final hasta el primer impar.",
            "Mostrar el resultado truncado."
        ],
        "pistas": [
            "No usar BigInteger, trabaja hasta 12!.",
            "Convertir el factorial a cadena y cortar según la condición.",
            "No usar arrays dinámicos."
        ],
        "ejemplo": {
            "entrada": "7",
            "salida": "Factorial: 5040\nFactorial truncado: 5"
        }
    },
    {
        "id": "13",
        "titulo": "Sistema dúo",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Un grupo de ingenieros usa un sistema numérico en base 2, pero con las cifras representadas por letras: 'A' representa 0 y 'B' representa 1. Por ejemplo, el número binario 101 se escribe como BAB. Crea un programa SistemaDuo.java que permita convertir un número decimal a este sistema y también descodificarlo.",
        "tareas": [
            "Ofrecer un menú con opciones:\n  1. Decimal a sistema dúo\n  2. Sistema dúo a decimal\n  3. Salir",
            "Procesar la opción seleccionada y mostrar el resultado.",
            "Validar que las entradas sean correctas.",
            "Repetir el menú hasta que el usuario elija salir."
        ],
        "pistas": [
            "Para convertir decimal a sistema dúo, convertir primero a binario con toBinaryString y luego reemplazar 0 por 'A' y 1 por 'B'.",
            "Para convertir de sistema dúo a decimal, validar que solo haya 'A' y 'B' y luego interpretar 'A' como 0 y 'B' como 1 para convertir a decimal.",
            "Usar bucles para el menú y validaciones."
        ],
        "ejemplo": {
            "entrada": [
                "Sistema dúo\n1. Decimal a sistema dúo\n2. Sistema dúo a decimal\n3. Salir\n",
                "1",
                "Introduce el valor decimal: 5"
            ],
            "salida": "Resultado: BAB"
        }
    },
    {
        "id": "14",
        "titulo": "Cadenas espejo",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Dos palabras se consideran \"espejo\" si una es exactamente la inversa de la otra. Por ejemplo, \"roma\" y \"amor\". Crea un programa CadenasEspejo.java que reciba dos palabras y determine si son reflejo exacto entre sí. El programa debe ignorar mayúsculas y mostrar el resultado claro.",
        "tareas": [
            "Leer dos palabras.",
            "Convertir ambas a minúsculas.",
            "Comprobar si una palabra es igual a la inversa de la otra.",
            "Mostrar un mensaje claro indicando si son palabras espejo o no."
        ],
        "pistas": [
            "Para invertir una cadena, recorre sus caracteres de derecha a izquierda.",
            "Usa métodos básicos como toLowerCase() y charAt().",
            "No usar estructuras avanzadas ni librerías externas."
        ],
        "ejemplo": {
            "entrada": [
                "Ingrese la primera palabra: Roma",
                "Ingrese la segunda palabra: amor"
            ],
            "salida": "Resultado: Son palabras espejo."
        }
    },
    {
        "id": "15",
        "titulo": "Contador de vocales y consonantes",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Escribe un programa ContadorLetras.java que reciba una frase y cuente cuántas vocales y cuántas consonantes contiene. El programa debe ignorar espacios, mayúsculas y signos de puntuación, considerando solo las letras del alfabeto inglés.",
        "tareas": [
            "Leer una frase del usuario.",
            "Convertir la frase a minúsculas.",
            "Contar cuántas vocales y consonantes hay, ignorando números, espacios y símbolos.",
            "Mostrar el número de vocales y consonantes."
        ],
        "pistas": [
            "Usa toLowerCase() para uniformizar la cadena.",
            "Revisa carácter a carácter para determinar si es vocal o consonante.",
            "Ignora cualquier carácter que no sea una letra de la 'a' a la 'z'."
        ],
        "ejemplo": {
            "entrada": [
                "Esto es una Prueba!"
            ],
            "salida": [
                "Vocales: 8",
                "Consonantes: 7"
            ]
        }
    },
    {
        "id": "16",
        "titulo": "Matriz fantasma",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Una cuadrícula es considerada \"fantasma\" si todos sus elementos en la diagonal principal son ceros. Crea un programa MatrizFantasma.java que permita al usuario introducir una matriz cuadrada (de tamaño 3x3 como mínimo), la imprima en pantalla y verifique si cumple la propiedad fantasma. El usuario deberá introducir los valores fila por fila.",
        "tareas": [
            "Pedir el tamaño n de la matriz (n ≥ 3).",
            "Leer n x n enteros usando bucles anidados.",
            "Imprimir la matriz en formato cuadrado.",
            "Evaluar si todos los elementos [i][i] de la diagonal principal son cero.",
            "Mostrar si la matriz es fantasma o no."
        ],
        "pistas": [
            "Usa un array bidimensional int[][] para almacenar la matriz.",
            "Para imprimir la matriz, usa dos bucles for anidados.",
            "Valida que el tamaño ingresado sea 3 o más antes de continuar.",
            "Recorre la diagonal principal con un solo bucle y verifica los ceros."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce el tamaño de la matriz (mínimo 3): 3",
                "Fila 1: 0 2 3",
                "Fila 2: 4 0 6",
                "Fila 3: 7 8 0"
            ],
            "salida": [
                "0 2 3",
                "4 0 6",
                "7 8 0",
                "Resultado: La matriz es fantasma."
            ]
        }
    },
    {
        "id": "17",
        "titulo": "Conversor a Notación Leet",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "La notación leet es una forma de escritura popular en la cultura hacker que sustituye ciertas letras por números o símbolos. Crea un programa LeetConverter.java que tome una frase y la convierta a notación leet siguiendo esta conversión básica: A → 4, E → 3, I → 1, O → 0, S → 5, T → 7. El programa debe preservar mayúsculas si estaban presentes.",
        "tareas": [
            "Leer una frase completa del usuario.",
            "Recorrer la frase carácter por carácter.",
            "Reemplazar las letras A, E, I, O, S, T (mayúsculas o minúsculas) por sus equivalentes numéricos.",
            "Mantener el resto de caracteres intactos, respetando mayúsculas y minúsculas.",
            "Mostrar la frase convertida."
        ],
        "pistas": [
            "Convierte cada carácter a minúscula para comparar, pero conserva el original para mantener mayúsculas donde corresponda.",
            "Usa una estructura if-else para cada letra a reemplazar.",
            "Concatenar el resultado en un StringBuilder para mejor eficiencia.",
            "No modificar espacios ni signos de puntuación."
        ],
        "ejemplo": {
            "entrada": "Introduce la frase: Esto es un Test de Leet",
            "salida": "Resultado: 3570 35 un 7357 d3 L337"
        }
    },
    {
        "id": "18",
        "titulo": "Suma Piramidal con Visualización",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "La suma piramidal de un número es la suma de todos los enteros desde 1 hasta ese número. Por ejemplo, la suma piramidal de 4 es 1 + 2 + 3 + 4 = 10. Crea un programa SumaPiramidal.java que permita al usuario introducir un número positivo y calcule su suma piramidal, mostrando además el proceso visualmente como una pirámide alineada a la izquierda.",
        "tareas": [
            "Leer un número entero positivo.",
            "Para cada línea desde 1 hasta el número, imprimir la suma acumulada en formato de suma (ejemplo: 1 + 2 + 3).",
            "Calcular la suma total del número.",
            "Mostrar el resultado total después de imprimir todas las líneas."
        ],
        "pistas": [
            "Validar que el número sea positivo antes de proceder.",
            "Para imprimir la suma acumulativa, usa un bucle anidado para generar la línea.",
            "No uses estructuras de cadenas complejas, solo System.out.print y System.out.println.",
            "Al imprimir cada línea, separa los números con ' + ', sin terminar con ' + ' al final."
        ],
        "ejemplo": {
            "entrada": "Introduce un número: 4",
            "salida": "1\n1 + 2\n1 + 2 + 3\n1 + 2 + 3 + 4\nSuma piramidal: 10"
        }
    },
    {
        "id": "19",
        "titulo": "Intercambio de Palabras Extremas",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Escribe un programa IntercambioExtremos.java que lea una frase y cambie la primera palabra con la última. Si hay una sola palabra, se muestra tal cual. El programa debe funcionar con frases largas y mantener los espacios intermedios sin modificación.",
        "tareas": [
            "Leer una línea completa.",
            "Identificar la primera y última palabra.",
            "Intercambiar la primera y última palabra.",
            "Reconstruir la frase con las palabras intercambiadas.",
            "Imprimir el resultado."
        ],
        "pistas": [
            "Usar split para separar las palabras.",
            "Mantener el orden del resto de palabras sin modificar.",
            "No usar estructuras de datos complejas ni librerías adicionales."
        ],
        "ejemplo": {
            "entrada": "Introduce la frase: Java es un lenguaje versátil",
            "salida": "versátil es un lenguaje Java"
        }
    },
    {
        "id": "20",
        "titulo": "Criptograma Desplazado",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa CriptogramaDesplazado.java que cifre un mensaje sustituyendo cada letra por la letra situada n posiciones después en el alfabeto (tipo cifrado César). El desplazamiento n será introducido por el usuario. El alfabeto es circular, así que la 'z' con desplazamiento 1 se convierte en 'a'. El programa solo afecta letras minúsculas.",
        "tareas": [
            "Leer una frase y un número entero de desplazamiento.",
            "Para cada carácter de la frase, aplicar el desplazamiento solo si es una letra minúscula.",
            "Ignorar mayúsculas, espacios y símbolos sin modificarlos.",
            "Imprimir el mensaje cifrado resultante."
        ],
        "pistas": [
            "Utilizar el código ASCII para convertir letras a números y viceversa.",
            "Para letras minúsculas, asegurarse de que el desplazamiento sea circular entre 'a' y 'z'.",
            "Ignorar caracteres que no estén entre 'a' y 'z' durante el cifrado.",
            "Usar cast de char a int y de int a char para el cálculo."
        ],
        "ejemplo": {
            "entrada": "Introduce el mensaje: hola mundo\nIntroduce el desplazamiento: 3",
            "salida": "Resultado cifrado: krod pxqgr"
        }
    },
    {
        "id": "21",
        "titulo": "Contador de Palíndromos",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Los palíndromos son palabras que se leen igual de izquierda a derecha que de derecha a izquierda, como “ana” o “radar”. Crea un programa ContadorPalindromos.java que pida una frase al usuario y cuente cuántas palabras dentro de esa frase son palíndromos. El programa debe ignorar mayúsculas, signos de puntuación y espacios, y considerar solo las letras al evaluar.",
        "tareas": [
            "Leer una frase completa.",
            "Dividir la frase en palabras separadas por espacios.",
            "Para cada palabra, eliminar caracteres no alfabéticos y convertirla a minúsculas.",
            "Comprobar si la palabra resultante es un palíndromo sin usar funciones externas.",
            "Contar cuántas palabras son palíndromos y mostrar el total."
        ],
        "pistas": [
            "Usar un bucle para recorrer cada palabra.",
            "Para limpiar cada palabra, recorrer sus caracteres y conservar solo letras.",
            "Comparar la palabra con su reverso mediante un bucle o índices.",
            "Ignorar palabras vacías tras limpieza."
        ],
        "ejemplo": {
            "entrada": "Introduce una frase: Ana, eres radar en el radar.",
            "salida": "Palíndromos encontrados: 3"
        }
    },
    {
        "id": "22",
        "titulo": "Minero de Números Primos",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Un minero de datos quiere extraer todos los números primos dentro de un rango dado por el usuario. Crea un programa MineroPrimos.java que pida dos números enteros a y b (con a < b) y muestre todos los números primos entre ellos (incluidos).",
        "tareas": [
            "Pedir al usuario dos números enteros positivos, asegurando que el primero sea menor que el segundo.",
            "Implementar una función para determinar si un número es primo.",
            "Recorrer el rango desde a hasta b, identificando y mostrando los números primos.",
            "Contar y mostrar el total de números primos encontrados."
        ],
        "pistas": [
            "Validar que los números sean positivos y que a < b antes de procesar.",
            "Para comprobar si un número es primo, verifica divisibilidad solo hasta la raíz cuadrada del número.",
            "Ignorar números menores que 2, ya que no son primos.",
            "Mostrar los números primos en una sola línea separados por espacios."
        ],
        "ejemplo": {
            "entrada": "Introduce el número inicial: 10\nIntroduce el número final: 20",
            "salida": "Primos encontrados: 11 13 17 19\nTotal: 4"
        }
    },
    {
        "id": "23",
        "titulo": "Calendario Mensual con Alineación Semanal",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa CalendarioMes.java que pida al usuario un mes (como número entre 1 y 12) y un año, y muestre por pantalla el calendario completo de ese mes en formato semanal (de sábado a viernes). El programa debe tener en cuenta años bisiestos para febrero y mostrar correctamente el día de la semana en que empieza el mes.",
        "tareas": [
            "Leer un número para el mes entre 1 y 12 y un año válido.",
            "Determinar si el año es bisiesto para calcular los días de febrero.",
            "Calcular el día de la semana en que comienza el mes (sabado=0, domingo=1, etc.).",
            "Imprimir los días de la semana como encabezado (Sáb Dom Lun Mar Mié Jue Vie).",
            "Mostrar los días del mes alineados bajo su día correspondiente, con espacios para los días previos al inicio."
        ],
        "pistas": [
            "Validar que el mes esté entre 1 y 12, y que el año sea positivo.",
            "Para saber si un año es bisiesto: es divisible por 4 y no por 100, salvo que sea divisible por 400.",
            "Usa el algoritmo de Zeller o equivalente para calcular el día de la semana del 1 de ese mes y año.",
            "Alinea los días en columnas para que cada fila contenga los días de una semana.",
            "Imprime espacios en blanco o tabulaciones para los días antes del primero del mes."
        ],
        "ejemplo": {
            "entrada": "Introduce el mes (1-12): 2\nIntroduce el año: 2024",
            "salida": "Sáb Dom Lun Mar Mié Jue Vie\n                       1   2   3   4\n5   6   7   8   9  10  11\n12  13  14  15  16  17  18\n19  20  21  22  23  24  25\n26  27  28  29"
        }
    },
    {
        "id": "24",
        "titulo": "Decodificador de Código Morse",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "El código Morse es un sistema de codificación que representa letras y números con puntos y rayas. Crea un programa DecodificadorMorse.java que reciba una cadena en Morse (usando '.' para puntos, '-' para rayas, espacios entre letras y ‘/’ entre palabras) y la convierta a texto legible en español. Considera solo letras mayúsculas, números y espacio.",
        "tareas": [
            "Leer una cadena que contenga código Morse.",
            "Crear un diccionario que relacione código Morse con letras y números.",
            "Dividir la cadena en palabras usando '/' y luego en letras usando espacios.",
            "Traducir cada símbolo Morse a su correspondiente carácter.",
            "Reconstruir y mostrar la frase traducida en texto legible."
        ],
        "pistas": [
            "Utiliza un mapa o estructura similar para asociar cadenas Morse con caracteres.",
            "Separa primero por '/' para obtener palabras y luego por espacios para letras.",
            "Convierte todas las letras a mayúsculas para uniformidad.",
            "Evita usar librerías externas para la traducción.",
            "Cuida los espacios para que las palabras estén bien separadas."
        ],
        "ejemplo": {
            "entrada": "Introduce código Morse: .... . .-.. .-.. --- / -- ..- -. -.. ---",
            "salida": "Texto traducido: HELLO MUNDO"
        }
    },
    {
        "id": "25",
        "titulo": "Analizador de Temperaturas Mensuales",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Un meteorólogo necesita analizar datos de temperatura. Crea un programa AnalizadorTemperaturas.java que reciba una serie de temperaturas diarias para un mes (número de días pedido al usuario) y calcule la temperatura media, la temperatura más alta y la más baja. Además, debe mostrar qué días tuvieron la temperatura máxima y mínima.",
        "tareas": [
            "Leer el número de días del mes.",
            "Pedir las temperaturas diarias y almacenarlas en un array.",
            "Calcular la temperatura media.",
            "Determinar la temperatura máxima y mínima.",
            "Mostrar la media, máximo, mínimo y los días en que ocurrieron las temperaturas extremas."
        ],
        "pistas": [
            "Usa un array para guardar las temperaturas.",
            "Recorre el array para calcular la suma total y encontrar máximos y mínimos.",
            "Guarda los índices (días) donde se encuentran los valores máximos y mínimos.",
            "Al mostrar los días, separa con comas y cuida la pluralidad (día/días).",
            "Convierte índices de array en días empezando desde 1."
        ],
        "ejemplo": {
            "entrada": "Número de días: 5\nDía 1: 23\nDía 2: 25\nDía 3: 20\nDía 4: 25\nDía 5: 22",
            "salida": "Temperatura media: 23.0\nTemperatura mínima: 20 en día 3\nTemperatura máxima: 25 en días 2, 4"
        }
    },
    {
        "id": "26",
        "titulo": "Conversor de Bases Numéricas",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Los sistemas numéricos en informática van más allá del decimal. Crea un programa ConversorBases.java que permita al usuario convertir un número entero dado en base decimal a cualquiera de las bases siguientes: binario (base 2), octal (base 8) o hexadecimal (base 16). El usuario debe elegir la base destino, y el programa mostrará el resultado de la conversión. El programa debe validar la entrada y permitir repetir conversiones hasta que el usuario decida salir.",
        "tareas": [
            "Pedir un número entero decimal al usuario.",
            "Pedir la base destino, que puede ser 2, 8 o 16.",
            "Convertir el número decimal a la base seleccionada sin usar funciones predefinidas como Integer.toBinaryString.",
            "Mostrar el resultado de la conversión.",
            "Preguntar al usuario si desea realizar otra conversión y repetir o finalizar según respuesta."
        ],
        "pistas": [
            "Valida que el número decimal sea un entero válido.",
            "Valida que la base destino sea solo 2, 8 o 16.",
            "Implementa la conversión usando divisiones sucesivas y restos.",
            "Para base 16, utiliza letras A-F para valores entre 10 y 15.",
            "Controla el flujo para repetir hasta que el usuario indique que no."
        ],
        "ejemplo": {
            "entrada": "Introduce número decimal: 255\nElige base destino: 2 (binario), 8 (octal), 16 (hexadecimal): 2\n¿Quieres convertir otro número? (s/n): s\nIntroduce número decimal: 64\nElige base destino: 8\n¿Quieres convertir otro número? (s/n): n",
            "salida": "Número en base 2: 11111111\nNúmero en base 8: 100\nAdiós"
        }
    },
    {
        "id": "27",
        "titulo": "Juego Adivina el Número",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un juego interactivo llamado AdivinaNumero.java en el que el programa genere un número aleatorio entre 1 y 100, y el usuario debe intentar adivinarlo. Por cada intento, el programa indicará si el número es mayor o menor que el intento. El juego termina si el usuario en su intento introduce 0 o cuando acierta y muestra el número de intentos usados.",
        "tareas": [
            "Generar un número aleatorio entre 1 y 100.",
            "Pedir al usuario que introduzca intentos hasta acertar o salir.",
            "Indicar si el número es mayor o menor que el intento dado.",
            "Inidicar el número mínimo (1) y el número máximo (100)",
            "Contar los intentos y mostrar el total al acertar."
        ],
        "pistas": [
            "Usar Random o Math.random() para generar el número aleatorio.",
            "Validar que el número introducido esté entre 1 y 100.",
            "Usar un bucle para repetir los intentos hasta acertar.",
            "Mostrar mensajes claros para cada pista y al finalizar."
        ],
        "ejemplo": {
            "entrada": "Adivina el número entre 1 y 100\nIntroduce tu intento: 50\nIntroduce tu intento: 75\nIntroduce tu intento: -1\nIntroduce tu intento: 101\nIntroduce tu intento: 62",
            "salida": "El número es mayor\nEl número es menor\nComo mínimo 1\nComo máximo 100\n¡Correcto! Lo has acertado en 3 intentos."
        }
    },
    {
        "id": "28",
        "titulo": "Suma de Dígitos Pares",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado SumaDigitosPares.java que reciba un número entero positivo como argumento desde la línea de comandos y calcule la suma de sus dígitos pares.",
        "tareas": [
            "Leer el número desde los argumentos del método main (args).",
            "Validar que el número sea entero positivo.",
            "Separar cada dígito del número.",
            "Sumar únicamente los dígitos que sean pares (0, 2, 4, 6, 8).",
            "Mostrar la suma final."
        ],
        "pistas": [
            "Convierte el número a cadena para recorrerlo carácter por carácter.",
            "Puedes usar Character.getNumericValue() para convertir un carácter en entero.",
            "Usa el operador módulo (%) para saber si un dígito es par."
        ],
        "ejemplo": {
            "entrada": "java SumaDigitosPares \"483927\"",
            "salida": "La suma de los dígitos pares en 483927 es 12."
        }
    },
    {
        "id": "29",
        "titulo": "Calculadora de Fracciones",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Realiza un programa CalculadoraFracciones.java que pida al usuario dos fracciones (numerador y denominador para cada una) y permita sumar, restar, multiplicar o dividir dichas fracciones. El programa debe mostrar el resultado en su forma simplificada (mínimo común denominador y fracción irreducible).",
        "tareas": [
            "Pedir al usuario el numerador y denominador de la primera fracción.",
            "Pedir al usuario el numerador y denominador de la segunda fracción.",
            "Validar que los denominadores no sean cero.",
            "Pedir al usuario la operación a realizar: suma (+), resta (-), multiplicación (*) o división (/).",
            "Calcular la fracción resultado según la operación elegida.",
            "Simplificar la fracción resultado usando el máximo común divisor (MCD).",
            "Mostrar el resultado simplificado."
        ],
        "pistas": [
            "Para sumar o restar, usar mínimo común denominador (MCD) y ajustar numeradores.",
            "Para multiplicar, multiplicar numeradores y denominadores directamente.",
            "Para dividir, multiplicar la primera fracción por el inverso de la segunda.",
            "Implementar función para calcular el máximo común divisor (MCD) para simplificar.",
            "Dividir numerador y denominador por el MCD para obtener la fracción irreducible."
        ],
        "ejemplo": {
            "entrada": "Introduce numerador 1: 1\nIntroduce denominador 1: 2\nIntroduce numerador 2: 3\nIntroduce denominador 2: 4\nElige operación (+ - * /): +",
            "salida": "Resultado: 5/4"
        }
    },
    {
        "id": "30",
        "titulo": "Contador de Palabras Únicas",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "En análisis de texto, contar palabras únicas es fundamental. Crea un programa llamado ContadorPalabrasUnicas.java que reciba una frase completa y cuente cuántas palabras diferentes contiene, ignorando mayúsculas y minúsculas. Además, debe mostrar la lista de palabras únicas ordenadas alfabéticamente. Por simplicidad, las palabras estarán separadas por espacios y no habrá signos de puntuación.",
        "tareas": [
            "Leer una frase de texto completa.",
            "Separar las palabras por espacios y convertirlas a minúsculas.",
            "Contar cuántas palabras únicas hay.",
            "Ordenar la lista de palabras únicas alfabéticamente.",
            "Mostrar el número total de palabras únicas.",
            "Mostrar la lista ordenada de palabras únicas separadas por comas."
        ],
        "pistas": [
            "Usa un array o lista para guardar las palabras.",
            "Comprueba si una palabra ya está en la lista antes de agregarla para evitar duplicados.",
            "Implementa un algoritmo simple de ordenamiento (como burbuja o selección) para ordenar alfabéticamente.",
            "No uses librerías externas ni métodos avanzados de colección para el conteo o ordenamiento."
        ],
        "ejemplo": {
            "entrada": "Introduce frase: Hola mundo hola programacion Mundo",
            "salida": "Número de palabras únicas: 3\nPalabras únicas: hola, mundo, programacion"
        }
    },
    {
        "id": "31",
        "titulo": "Analizador de Secuencia Numérica",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Diseña un programa llamado AnalizadorSecuencia.java que reciba una secuencia de números enteros separados por espacios. Debe calcular e imprimir la suma, el promedio, el número máximo y el mínimo de la secuencia. Además, debe indicar si la secuencia está ordenada de forma ascendente, descendente o no está ordenada.",
        "tareas": [
            "Leer la secuencia de números enteros separados por espacios.",
            "Calcular la suma de todos los números.",
            "Calcular el promedio (media) de la secuencia.",
            "Determinar el número máximo y mínimo de la secuencia.",
            "Comprobar si la secuencia está ordenada ascendentemente, descendentemente o no está ordenada.",
            "Mostrar todos los resultados calculados."
        ],
        "pistas": [
            "Puedes usar split para separar la cadena de entrada en números.",
            "Convierte cada elemento a entero y almacénalos en un array o lista.",
            "Para detectar orden, recorre la secuencia y compara elementos consecutivos.",
            "Ten en cuenta que una secuencia constante (todos iguales) puede considerarse ascendente y descendente.",
            "Asegúrate de validar que la secuencia no esté vacía y contenga solo enteros."
        ],
        "ejemplo": {
            "entrada": "Introduce números separados por espacio: 2 4 6 8 10",
            "salida": "Suma: 30\nPromedio: 6.0\nMáximo: 10\nMínimo: 2\nSecuencia ordenada: ascendente"
        }
    },
    {
        "id": "32",
        "titulo": "Simulador de Cambio en Monedas",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Elabora un programa llamado SimuladorCambio.java que convierta una cantidad de dinero en euros a monedas de distintas denominaciones: 2 €, 1 €, 0.50 €, 0.20 €, 0.10 €, 0.05 €, 0.02 € y 0.01 €. El programa debe pedir al usuario el importe en euros (puede ser decimal) y mostrar cuántas monedas de cada tipo se necesitan para dar ese importe con la menor cantidad total de monedas posible.",
        "tareas": [
            "Leer la cantidad en euros como número decimal.",
            "Redondear la cantidad para evitar errores por decimales.",
            "Convertir la cantidad a céntimos para trabajar con enteros.",
            "Calcular cuántas monedas de cada denominación se necesitan para minimizar el total de monedas.",
            "Mostrar la cantidad de monedas de cada tipo necesarias para el cambio."
        ],
        "pistas": [
            "Multiplica la cantidad en euros por 100 para trabajar en céntimos y redondea.",
            "Itera por las monedas de mayor a menor denominación para calcular cuántas monedas de cada tipo usar.",
            "Usa divisiones enteras y módulo para distribuir el cambio.",
            "Evita usar librerías o funciones de conversión avanzadas, solo operaciones básicas."
        ],
        "ejemplo": {
            "entrada": "Introduce cantidad en euros: 3.76",
            "salida": "1 moneda de 2€\n1 moneda de 1€\n1 moneda de 50 céntimos\n1 moneda de 20 céntimos\n1 moneda de 5 céntimos\n1 moneda de 1 céntimo"
        }
    },
    {
        "id": "33",
        "titulo": "Contador de Vocales y Consonantes con Porcentajes",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado ContadorVocalesConsonantes.java que pida una frase al usuario y cuente cuántas vocales y consonantes contiene. Se deben ignorar los espacios y cualquier otro carácter que no sea una letra del alfabeto. Además, el programa debe mostrar el porcentaje que representan las vocales y las consonantes respecto al total de letras.",
        "tareas": [
            "Leer una frase completa introducida por el usuario.",
            "Ignorar espacios y caracteres no alfabéticos.",
            "Contar las vocales (a, e, i, o, u) y las consonantes en la frase.",
            "Calcular el porcentaje que representa cada uno sobre el total de letras.",
            "Mostrar los resultados con la cantidad y porcentaje, con formato claro."
        ],
        "pistas": [
            "Convierte toda la frase a minúsculas para simplificar la comparación.",
            "Recorre cada carácter y verifica si es letra (entre 'a' y 'z').",
            "Distingue vocales y consonantes comprobando si el carácter está en 'aeiou'.",
            "Para el porcentaje, usa: (cantidad de letras o consonantes * 100.0) / suma de vocales y consonantes",
            "Usa formato para mostrar el porcentaje con dos decimales (.2f)."
        ],
        "ejemplo": {
            "entrada": "Introduce frase: Hola Mundo",
            "salida": "Vocales: 4 (44.44%)\nConsonantes: 5 (55.56%)"
        }
    },
    {
        "id": "34",
        "titulo": "Validador de Palíndromo Numérico",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Realiza un programa llamado ValidadorPalindromo.java que determine si un número entero positivo es un palíndromo, es decir, si se lee igual de izquierda a derecha que de derecha a izquierda. El programa debe pedir el número al usuario y mostrar un mensaje indicando si es palíndromo o no.",
        "tareas": [
            "Leer un número entero positivo.",
            "Validar que el número sea positivo, si no, pedir nuevamente.",
            "Comprobar si el número es palíndromo sin convertirlo a cadena.",
            "Mostrar mensaje claro indicando si es palíndromo o no."
        ],
        "pistas": [
            "Para comprobar palíndromo sin cadenas, invierte el número numéricamente.",
            "Extrae dígitos con división y módulo por 10.",
            "Comparar el número original con su reverso.",
            "Si son iguales, es palíndromo."
        ],
        "ejemplo": {
            "entrada": "Introduce un número: 12321",
            "salida": "El número es un palíndromo."
        }
    },
    {
        "id": "35",
        "titulo": "Simulador de Cola de Clientes",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Imagina un banco donde los clientes hacen cola para ser atendidos. Cada cliente tiene un número de ticket. Crea un programa SimuladorCola.java que permita simular la llegada y atención de clientes:\n\n    El usuario podrá añadir clientes a la cola (cada uno recibe un número de ticket consecutivo, empezando en 1).\n\n    El usuario podrá atender (eliminar) el cliente que está al frente de la cola.\n\n    El programa mostrará el estado actual de la cola después de cada operación.\n\n    El programa terminará cuando el usuario decida salir.",
        "tareas": [
            "Implementar el manejo de una cola (puede ser con listas o arrays) para simular los tickets.",
            "Mostrar un menú con las opciones: añadir cliente, atender cliente, mostrar cola, salir.",
            "Añadir cliente: asignar un ticket consecutivo y añadirlo a la cola.",
            "Atender cliente: eliminar el cliente al frente de la cola y mostrar su ticket.",
            "Mostrar la cola actual después de cada operación.",
            "Permitir repetir operaciones hasta que el usuario decida salir.",
            "Validar las entradas del usuario.",
            "Controlar casos de cola vacía."
        ],
        "pistas": [
            "Usa una estructura tipo lista o array para simular la cola.",
            "Lleva un contador para asignar tickets consecutivos.",
            "Para atender, elimina el primer elemento de la cola.",
            "Muestra mensajes claros después de cada operación.",
            "Usa bucles y control de menú para repetir acciones."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "1",
                "3",
                "2",
                "3",
                "4"
            ],
            "salida": [
                "Cliente con ticket 1 añadido a la cola.",
                "Cliente con ticket 2 añadido a la cola.",
                "Cola actual: 1 2",
                "Cliente con ticket 1 atendido.",
                "Cola actual: 2",
                "Fin del simulador."
            ]
        }
    },
    {
        "id": "36",
        "titulo": "Conversor de Temperaturas",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa ConversorTemperaturas.java que permita convertir temperaturas entre Celsius, Fahrenheit y Kelvin mediante un menú interactivo. El usuario podrá seleccionar el tipo de conversión que desea hacer y deberá ingresar la temperatura. El programa mostrará el resultado de la conversión y repetirá el menú hasta que el usuario decida salir.",
        "tareas": [
            "Mostrar un menú con opciones: Celsius a Fahrenheit, Fahrenheit a Celsius, Celsius a Kelvin, Kelvin a Celsius, Salir.",
            "Pedir al usuario la temperatura según la opción seleccionada.",
            "Realizar la conversión correspondiente con fórmulas correctas.",
            "Mostrar el resultado de la conversión con el formato adecuado.",
            "Repetir el menú hasta que el usuario elija salir.",
            "Validar que la opción del menú sea válida."
        ],
        "pistas": [
            "Usa un bucle para mostrar y repetir el menú.",
            "Para Celsius a Fahrenheit: F = C * 9/5 + 32.",
            "Para Fahrenheit a Celsius: C = (F - 32) * 5/9.",
            "Para Celsius a Kelvin: K = C + 273.15.",
            "Para Kelvin a Celsius: C = K - 273.15.",
            "Validar que la opción esté entre 1 y 5.",
            "Muestra mensajes claros al usuario."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "0",
                "5"
            ],
            "salida": [
                "Introduce temperatura en Celsius: 0",
                "0°C son 32.0°F",
                "Fin del programa."
            ]
        }
    },
    {
        "id": "37",
        "titulo": "Temperatura promedio válida",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Escribe un programa llamado TemperaturaPromedio.java que reciba una serie de temperaturas como argumentos en `args` (pueden ser números decimales positivos o negativos). El programa debe calcular el promedio de las temperaturas **válidas** (solo las que están entre -50 y 60 grados). Las temperaturas fuera de este rango deben ser ignoradas. Si no hay temperaturas válidas, se debe mostrar un mensaje indicándolo.",
        "tareas": [
            "Leer todos los valores de `args` como números decimales.",
            "Ignorar los valores fuera del rango [-50, 60].",
            "Sumar todas las temperaturas válidas.",
            "Calcular el promedio solo si hay temperaturas válidas.",
            "Mostrar el promedio con dos decimales o un mensaje si no hay datos válidos."
        ],
        "pistas": [
            "Usa `Double.parseDouble()` para convertir cada argumento.",
            "Utiliza una variable para acumular la suma y otra para contar los valores válidos.",
            "Recuerda que dividir entre cero no está permitido: verifica antes de calcular el promedio.",
            "Puedes usar `String.format()` o `printf()` para mostrar el resultado con dos decimales."
        ],
        "ejemplo": {
            "entrada": "java TemperaturaPromedio 22.5 -12.3 999 72 -55 0.0",
            "salida": "Promedio de temperaturas válidas: 3.4"
        }
    },
    {
        "id": "38",
        "titulo": "Calculadora de Matrices 2x2",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa CalculadoraMatrices2x2.java que permita realizar operaciones básicas con matrices 2x2: suma, resta y multiplicación. El usuario deberá ingresar dos matrices (cada una con 4 números) y luego elegir la operación a realizar. El programa mostrará el resultado de la operación seleccionada.",
        "tareas": [
            "Pedir al usuario los 4 elementos de la matriz A.",
            "Pedir los 4 elementos de la matriz B.",
            "Mostrar un menú con opciones: suma, resta, multiplicación y salir.",
            "Realizar la operación seleccionada usando la lógica adecuada para matrices 2x2.",
            "Mostrar la matriz resultante en formato 2x2.",
            "Repetir el menú hasta que el usuario elija salir."
        ],
        "pistas": [
            "Para sumar o restar matrices, opera elemento a elemento.",
            "Para multiplicar matrices 2x2, usa la regla clásica: resultado[i][j] = suma de A[i][k]*B[k][j].",
            "Validar que las entradas sean números válidos.",
            "Mostrar claramente el resultado en forma de matriz."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce matriz A (4 números): 1 2 3 4",
                "Introduce matriz B (4 números): 5 6 7 8",
                "Opción: 1"
            ],
            "salida": "Resultado:\n6 8\n10 12"
        }
    },
    {
        "id": "39",
        "titulo": "Palabra más larga",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa llamado palabraMasLarga.java que reciba varias palabras como argumentos en `args` y determine cuál es la palabra más larga. Si hay varias con la misma longitud máxima, debe mostrar la primera que aparece. El programa debe ignorar signos de puntuación comunes (como . , ; : ! ?).",
        "tareas": [
            "Leer los argumentos de `args` como palabras.",
            "Eliminar los signos de puntuación al inicio y final de cada palabra.",
            "Determinar cuál es la palabra con mayor número de letras.",
            "Mostrar la palabra más larga y su longitud."
        ],
        "pistas": [
            "Puedes usar `replaceAll(\"^[.,;:!?]+|[.,;:!?]+$\", \"\")` para limpiar los signos.",
            "Usa un bucle para recorrer todas las palabras.",
            "Guarda la palabra más larga encontrada y su longitud en cada iteración."
        ],
        "ejemplo": {
            "entrada": "java PalabraMasLarga \"hola mundo programación en-java increíble!\"",
            "salida": "Palabra más larga: programación (13 letras)"
        }
    },
    {
        "id": "40",
        "titulo": "Frecuencia de Caracteres",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa FrecuenciaCaracteres.java que reciba una cadena de texto del usuario y calcule la frecuencia de cada carácter que aparece en ella. El programa debe mostrar cada carácter y cuántas veces aparece en la cadena, ignorando mayúsculas y minúsculas (es decir, 'A' y 'a' se cuentan juntos). Además, los espacios y signos de puntuación también deben ser contados y mostrados.",
        "tareas": [
            "Pedir al usuario que introduzca una frase o texto.",
            "Convertir todo el texto a minúsculas para evitar distinción entre mayúsculas y minúsculas.",
            "Contar cuántas veces aparece cada carácter, incluyendo espacios y signos de puntuación.",
            "Mostrar los caracteres y sus frecuencias en orden de aparición o alfabético."
        ],
        "pistas": [
            "Usa HashMap para almacenar los caracteres ya contados y sus frecuencias.",
            "Recorre el texto caracter por caracter y actualiza las frecuencias.",
            "Imprime cada carácter con su frecuencia, incluyendo espacios y signos.",
            "Para mostrar los caracteres ordenados usa List y uno de los algoritmos de ordenación (Burbuja o Selección)."
        ],
        "ejemplo": {
            "entrada": "Introduce texto: Hola, Mundo!",
            "salida": [
                "' ' : 1",
                "'!' : 1",
                "',' : 1",
                "'a' : 1",
                "'d' : 1",
                "'h' : 1",
                "'l' : 2",
                "'m' : 1",
                "'n' : 1",
                "'o' : 2",
                "'u' : 1"
            ]
        }
    },
    {
        "id": "41",
        "titulo": "Validador de Contraseñas Seguras (repetido)",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Las contraseñas seguras son fundamentales para proteger la información personal en cualquier sistema. Debes crear un programa en Java llamado ValidadorContrasenaSeguras.java que solicite al usuario una contraseña y valide que esta cumpla con requisitos mínimos de seguridad. El programa debe verificar que la contraseña tenga al menos 8 caracteres, contenga al menos una letra mayúscula, una minúscula, un número y un carácter especial (como !, @, #, $, %, &). Si la contraseña no cumple alguno de estos requisitos, el programa debe indicarlo claramente para que el usuario pueda corregirla. Si cumple todos los requisitos, se debe mostrar un mensaje indicando que la contraseña es segura.",
        "tareas": [
            "Pedir al usuario que introduzca una contraseña.",
            "Verificar que tenga al menos 8 caracteres.",
            "Comprobar que contiene al menos una letra mayúscula.",
            "Comprobar que contiene al menos una letra minúscula.",
            "Comprobar que contiene al menos un número.",
            "Comprobar que contiene al menos un carácter especial (!, @, #, $, %, &).",
            "Informar al usuario qué requisitos no cumple la contraseña.",
            "Repetir el proceso hasta que la contraseña sea segura."
        ],
        "pistas": [
            "Recorrer la contraseña caracter por caracter para comprobar cada criterio.",
            "Usar variables booleanas para registrar el cumplimiento de cada requisito.",
            "Mostrar mensajes claros para cada requisito no cumplido.",
            "No usar librerías externas, sólo métodos básicos de String y char."
        ],
        "ejemplo": {
            "entrada": "Introduce la contraseña: holaMundo1",
            "salida": "La contraseña debe contener al menos un carácter especial."
        }
    },
    {
        "id": "42",
        "titulo": "Generador de Claves Seguras",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Generar contraseñas seguras es una tarea frecuente para proteger cuentas y datos personales. En este ejercicio, debes crear un programa GeneradorClaves.java que permita al usuario definir la longitud deseada de una contraseña y luego genere una contraseña aleatoria que incluya letras mayúsculas, minúsculas, números y símbolos especiales. El programa debe preguntar al usuario si quiere generar otra contraseña y continuar hasta que el usuario decida salir.",
        "tareas": [
            "Pedir al usuario la longitud de la contraseña.",
            "Generar una contraseña aleatoria con al menos una mayúscula, una minúscula, un número y un símbolo especial.",
            "Mostrar la contraseña generada.",
            "Preguntar si desea generar otra y repetir o terminar."
        ],
        "pistas": [
            "Usar la clase Random para seleccionar caracteres aleatorios.",
            "Asegurarse de incluir al menos un carácter de cada tipo en la contraseña generada.",
            "Mezclar los caracteres para evitar patrones predecibles.",
            "Validar que la longitud sea suficiente para incluir todos los tipos de caracteres."
        ],
        "ejemplo": {
            "entrada": "Introduce la longitud de la clave: 12",
            "salida": "Clave generada: a8#L!p2Mf9@q\n¿Generar otra? (s/n): n\nFin del programa."
        }
    },
    {
        "id": "43",
        "titulo": "Inversor de Lista de Números",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Invertir el orden de una lista es un ejercicio clásico para comprender arreglos y algoritmos. En este ejercicio, debes crear un programa InversorListaNumeros.java que permita al usuario introducir una lista de números enteros separados por espacios. El programa debe invertir el orden de los números y mostrarlos, pero no puede usar métodos nativos como Collections.reverse(). La inversión debe hacerse mediante intercambio manual.",
        "tareas": [
            "Leer la línea completa con números separados por espacios.",
            "Guardar los números en un array.",
            "Implementar un algoritmo para invertir el array sin usar métodos nativos.",
            "Mostrar la lista invertida al usuario."
        ],
        "pistas": [
            "Usar Scanner.nextLine() para leer la línea completa.",
            "Separar la cadena en partes con split(\" \").",
            "Convertir cada parte a entero y almacenarla en un array.",
            "Usar un bucle para intercambiar elementos desde los extremos hacia el centro."
        ],
        "ejemplo": {
            "entrada": "Introduce lista de números separados por espacios: 5 10 15 20",
            "salida": "Lista invertida: 20 15 10 5"
        }
    },
    {
        "id": "44",
        "titulo": "Buscador de Palíndromas en Frase",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Los palíndromos son palabras que se leen igual al derecho que al revés. Tu tarea es crear un programa BuscadorPalindromas.java que reciba una frase del usuario, la procese eliminando signos de puntuación y normalizando mayúsculas y minúsculas, y luego encuentre todas las palabras palíndromas en esa frase. El programa debe mostrar las palabras palíndromas encontradas, sin repeticiones y ordenadas alfabéticamente.",
        "tareas": [
            "Pedir al usuario una frase.",
            "Procesar la frase para eliminar signos de puntuación y pasar todo a minúsculas.",
            "Identificar palabras que sean palíndromas.",
            "Eliminar duplicados manualmente.",
            "Mostrar la lista ordenada alfabéticamente.",
            "No se pueden usar elementos externos, pero si crear las funciones que sean necesarias"
        ],
        "pistas": [
            "Usar expresiones regulares para eliminar signos de puntuación.",
            "Convertir la frase a minúsculas para normalizar.",
            "Separar la frase en palabras con split.",
            "Implementar función para comprobar si una palabra es palíndroma.",
            "Para eliminar duplicados, recorrer y comparar antes de añadir.",
            "Ordenar el arreglo resultante con un algoritmo simple (como burbuja o selección)."
        ],
        "ejemplo": {
            "entrada": "Introduce texto: Ana tiene un radar y un kayak",
            "salida": "Palíndromas: ana, kayak, radar"
        }
    },
    {
        "id": "45",
        "titulo": "Calculadora de Factorial Iterativa",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "El cálculo del factorial de un número entero es una operación común en matemáticas y programación, pero puede volverse muy grande o inválido si se ingresan valores no adecuados. Crea un programa en Java llamado CalculadoraFactorial.java que permita al usuario introducir un número entero y calcule su factorial. El programa debe validar que el número sea un entero no negativo y, en caso contrario, mostrar un mensaje de error y pedir de nuevo. El cálculo debe realizarse usando un método iterativo y mostrar el resultado final.",
        "tareas": [
            "Pedir al usuario un número entero.",
            "Verificar que sea mayor o igual a cero.",
            "Si el número no es válido, mostrar un mensaje y pedir otra vez.",
            "Calcular el factorial usando un ciclo iterativo.",
            "Mostrar el resultado."
        ],
        "pistas": [
            "Usar un método para calcular el factorial.",
            "El programa debe repetir la petición hasta que el usuario introduzca un dato válido.",
            "No usar recursión para este ejercicio."
        ],
        "ejemplo": {
            "entrada": "Introduce un número entero no negativo: -5\nIntroduce un número entero no negativo: 5",
            "salida": "Error: el número debe ser entero y no negativo.\nFactorial de 5 es: 120"
        }
    },
    {
        "id": "46",
        "titulo": "Contador de Palabras y Vocales",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Desarrolla un programa en Java llamado ContadorPalabrasVocales.java que solicite al usuario ingresar una frase completa y, a partir de ella, cuente cuántas palabras tiene y cuántas vocales aparecen en total. El programa debe considerar vocales tanto mayúsculas como minúsculas y debe ignorar caracteres no alfabéticos al contar las vocales. La frase puede contener espacios, signos de puntuación y números, pero solo las palabras alfabéticas se cuentan. Muestra ambos totales claramente.",
        "tareas": [
            "Pedir al usuario una frase.",
            "Contar el número de palabras (separadas por espacios).",
            "Contar el total de vocales en la frase, considerando A, E, I, O, U (mayúsculas y minúsculas).",
            "Mostrar ambos resultados."
        ],
        "pistas": [
            "Contar solo palabras separadas por espacios (puede usar split).",
            "Considerar vocales en mayúsculas y minúsculas.",
            "Ignorar caracteres no alfabéticos para el conteo de vocales."
        ],
        "ejemplo": {
            "entrada": "Introduce una frase: ¡Hola, mundo! Esto es Java 2025.",
            "salida": "Número de palabras: 6\nNúmero total de vocales: 9"
        }
    },
    {
        "id": "47",
        "titulo": "Generador de Números Primos",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Diseña un programa Java llamado GeneradorPrimos.java que solicite un número entero positivo N y muestre todos los números primos menores o iguales a N. El programa debe validar que N sea positivo, y luego usar un método para determinar si un número es primo, mostrando la lista resultante en pantalla. La solución debe ser eficiente para N razonablemente grande (por ejemplo, hasta 10,000).",
        "tareas": [
            "Pedir un número entero positivo N.",
            "Validar que N > 0, repetir si no es válido.",
            "Mostrar todos los números primos desde 2 hasta N.",
            "Implementar y usar un método para comprobar si un número es primo."
        ],
        "pistas": [
            "Validar entrada y repetir si no es válida.",
            "Usar ciclos for y condicionales para la lógica.",
            "Método propio para verificar primalidad."
        ],
        "ejemplo": {
            "entrada": "Introduce un número entero positivo: 15",
            "salida": "Números primos hasta 15: 2 3 5 7 11 13"
        }
    },
    {
        "id": "48",
        "titulo": "Simulador de Lanzamientos de Dados",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Crea un programa Java llamado SimuladorDados.java que simule el lanzamiento de dos dados de seis caras. El programa debe permitir al usuario indicar cuántas veces quiere lanzar los dados, y luego mostrar la cantidad de veces que cada suma (de 2 a 12) ha aparecido. Debe usarse la clase Random para simular los dados y los resultados deben imprimirse en forma ordenada, indicando claramente cada suma y su frecuencia.",
        "tareas": [
            "Pedir al usuario el número de lanzamientos (entero positivo).",
            "Validar que el número de lanzamientos sea positivo y repetir si no.",
            "Simular con Random el lanzamiento de dos dados N veces.",
            "Contar cuántas veces aparece cada suma de los dados usando un array.",
            "Mostrar los resultados ordenados por suma, con formato claro."
        ],
        "pistas": [
            "Usar la clase Random para generar números aleatorios.",
            "Almacenar los conteos en un array donde el índice represente la suma menos 2.",
            "Mostrar mensajes que usen singular/plural correctamente (\"vez\"/\"veces\")."
        ],
        "ejemplo": {
            "entrada": "Introduce el número de lanzamientos: 10",
            "salida": [
                "Suma 2: 0 veces",
                "Suma 3: 1 vez",
                "Suma 4: 0 veces",
                "Suma 5: 3 veces",
                "Suma 6: 2 veces",
                "Suma 7: 2 veces",
                "Suma 8: 1 vez",
                "Suma 9: 1 vez",
                "Suma 10: 0 veces",
                "Suma 11: 0 veces",
                "Suma 12: 0 veces"
            ]
        }
    },
    {
        "id": "49",
        "titulo": "Gestor Simple de Inventario",
        "nivel": "medio",
        "tipo": "Elementos básicos",
        "enunciado": "Diseña un programa en Java llamado GestorInventario.java que permita gestionar un inventario simple de productos. El usuario podrá ingresar varios productos con su nombre, cantidad y precio unitario. Al finalizar la entrada, el programa debe mostrar un listado con todos los productos y el valor total del inventario (cantidad × precio para cada producto sumado). El programa debe validar que la cantidad y el precio sean valores positivos.",
        "tareas": [
            "Permitir ingresar productos con nombre, cantidad y precio.",
            "Validar que cantidad y precio sean positivos; repetir si no.",
            "Permitir al usuario terminar la entrada escribiendo 'salir' como nombre.",
            "Almacenar datos en arrays o listas (según preferencia).",
            "Mostrar listado completo con nombre, cantidad, precio unitario y valor total por producto.",
            "Calcular y mostrar el valor total acumulado del inventario."
        ],
        "pistas": [
            "Validar entradas numéricas para cantidad (int) y precio (double).",
            "Usar estructuras básicas como arrays o listas para almacenar productos.",
            "Mostrar resultados con formato claro y ordenado."
        ],
        "ejemplo": {
            "entrada": [
                "Introduce nombre del producto (o 'salir' para terminar): lápices",
                "Introduce cantidad: 10",
                "Introduce precio unitario: 0.5",
                "Introduce nombre del producto (o 'salir' para terminar): cuadernos",
                "Introduce cantidad: 5",
                "Introduce precio unitario: 2.0",
                "Introduce nombre del producto (o 'salir' para terminar): salir"
            ],
            "salida": [
                "Inventario:",
                "- lápices: cantidad 10, precio unitario 0.5, valor total 5.0",
                "- cuadernos: cantidad 5, precio unitario 2.0, valor total 10.0",
                "Valor total del inventario: 15.0"
            ]
        }
    },
    {
        "id": "50",
        "titulo": "Simulador de Cajero Automático",
        "nivel": "fácil",
        "tipo": "Elementos básicos",
        "enunciado": "Desarrolla un programa llamado CajeroAutomatico.java que simule un cajero automático con saldo inicial fijo (ej. 1000 euros). El programa debe mostrar un menú con opciones para consultar saldo, ingresar dinero, retirar dinero y salir. Para ingreso y retiro se actualiza el saldo, validando que no se retire más del disponible. El programa repite el menú hasta que el usuario elige salir.",
        "tareas": [
            "Iniciar saldo fijo (por ejemplo, 1000.0).",
            "Mostrar menú con opciones: consultar saldo, ingresar dinero, retirar dinero, salir.",
            "Pedir opción al usuario y validar entrada numérica.",
            "Para ingresar dinero: pedir cantidad, validar positiva, sumar al saldo.",
            "Para retirar dinero: pedir cantidad, validar positiva y menor o igual al saldo, restar del saldo.",
            "Mostrar mensajes claros tras cada operación o error.",
            "Repetir el menú hasta que el usuario seleccione salir."
        ],
        "pistas": [
            "Usar bucle para mostrar menú y gestionar repetición.",
            "Validar entradas numéricas para opciones y cantidades.",
            "No permitir saldo negativo bajo ninguna circunstancia.",
            "Mostrar saldos con formato claro y ordenado."
        ],
        "ejemplo": {
            "entrada": [
                "Saldo inicial: 1000.0 euros",
                "--- CAJERO AUTOMÁTICO ---",
                "1. Consultar saldo",
                "2. Ingresar dinero",
                "3. Retirar dinero",
                "4. Salir",
                "Elige opción: 2",
                "Introduce cantidad a ingresar: 200",
                "--- CAJERO AUTOMÁTICO ---",
                "Elige opción: 3",
                "Introduce cantidad a retirar: 1300",
                "¡Error! Saldo insuficiente.",
                "--- CAJERO AUTOMÁTICO ---",
                "Elige opción: 3",
                "Introduce cantidad a retirar: 500",
                "--- CAJERO AUTOMÁTICO ---",
                "Elige opción: 4",
                "Gracias por usar el cajero automático."
            ],
            "salida": [
                "Dinero ingresado. Saldo actual: 1200.0 euros",
                "¡Error! Saldo insuficiente.",
                "Dinero retirado. Saldo actual: 700.0 euros",
                "Gracias por usar el cajero automático."
            ]
        }
    },
    {
        "id": "51",
        "titulo": "Clase Usuario para red social con solicitudes",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una red social quiere implementar una clase que represente a un Usuario. Cada usuario tiene un perfil con cierta información básica y puede interactuar con otros usuarios mediante el envío de solicitudes de amistad. El sistema necesita mantener un registro de cuántas solicitudes ha enviado y cuántas ha recibido.",
        "tareas": [
            "Implementar la clase Usuario con encapsulación adecuada (atributos privados y métodos públicos).",
            "Crear un constructor que inicialice nombre, correo y edad.",
            "Añadir método enviarSolicitud(Usuario destinatario) que incremente solicitudes enviadas y recibidas.",
            "Añadir método mostrarPerfil() que devuelva la información completa del usuario.",
            "Añadir método compararPopularidad(Usuario otro) que compare solicitudes recibidas y devuelva el usuario más popular.",
            "En el método main, crear al menos 3 usuarios, simular solicitudes entre ellos, mostrar perfiles y comparar popularidad."
        ],
        "pistas": [
            "Usar encapsulación para proteger los atributos.",
            "Validar tipos de datos y uso correcto de objetos en los métodos.",
            "Mostrar resultados claros y ordenados en mostrarPerfil().",
            "Comparar correctamente la popularidad basada en solicitudes recibidas."
        ],
        "ejemplo": {
            "entrada": [
                "Usuario: javier_23",
                "Correo: javier@example.com",
                "Edad: 22",
                "Solicitudes enviadas: 2",
                "Solicitudes recibidas: 1",
                "",
                "Usuario: ana_luna",
                "Correo: ana@example.com",
                "Edad: 25",
                "Solicitudes enviadas: 1",
                "Solicitudes recibidas: 2",
                "",
                "Usuario más popular entre javier_23 y ana_luna: ana_luna"
            ],
            "salida": []
        },
        "uml": "img/uml/51.svg"
    },
    {
        "id": "52",
        "titulo": "Sistema de préstamo de libros en una librería virtual",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una librería virtual desea desarrollar un sistema básico para gestionar libros y préstamos. Para ello, se deben modelar dos clases principales: Libro y Cliente. Cada cliente podrá tomar prestado un máximo de 3 libros a la vez. Cada libro debe saber si está disponible o no.",
        "tareas": [
            "Crear la clase Libro con atributos título, autor, ISBN y disponibilidad.",
            "Crear la clase Cliente con nombre, ID y una lista de libros prestados (máximo 3).",
            "En Libro, implementar métodos prestar(), devolver() y mostrarInfo().",
            "En Cliente, implementar métodos prestarLibro(Libro libro), devolverLibro(Libro libro) y mostrarPrestamos().",
            "En el programa principal, crear libros y clientes, realizar préstamos y devoluciones, y mostrar resultados."
        ],
        "pistas": [
            "Controla que no se puedan prestar libros si ya están prestados.",
            "Limita los libros prestados por cliente a un máximo de tres.",
            "Implementa los métodos usando condiciones para verificar estado y número de libros.",
            "Usa listas para manejar los libros prestados por cada cliente."
        ],
        "ejemplo": {
            "entrada": [
                "Cliente: Laura (ID: C102)",
                "Prestando \"Cien años de soledad\" a Laura...",
                "Libro prestado correctamente.",
                "",
                "Cliente: Laura",
                "Libros prestados:",
                "- Cien años de soledad",
                "",
                "Devolviendo \"Cien años de soledad\"...",
                "Libro devuelto correctamente.",
                "",
                "Cliente: Laura",
                "Libros prestados:",
                "(ninguno)",
                "",
                "Libro: Cien años de soledad (Gabriel García Márquez)",
                "Estado: Disponible"
            ],
            "salida": []
        },
        "uml": "img/uml/52.svg"
    },
    {
        "id": "53",
        "titulo": "Gestión de repartidores y paquetes",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa de reparto necesita un sistema para gestionar a sus repartidores y los envíos que se les asignan. Cada Repartidor tiene un nombre, un identificador único y puede llevar un máximo de 5 paquetes a la vez. Cada Paquete tiene una descripción, una dirección de destino y un estado que puede ser “pendiente”, “en tránsito” o “entregado”.",
        "tareas": [
            "Implementar las clases Paquete y Repartidor con encapsulación adecuada.",
            "Clase Paquete con atributos: descripcion, direccionDestino, estado.",
            "Clase Paquete con métodos: marcarEnTransito(), marcarEntregado(), mostrarInfo().",
            "Clase Repartidor con atributos: nombre, id, paquetesAsignados (lista de hasta 5 paquetes).",
            "Clase Repartidor con métodos: asignarPaquete(Paquete paquete), entregarPaquete(Paquete paquete), mostrarPaquetes().",
            "Controlar que un repartidor no reciba más de 5 paquetes.",
            "Actualizar correctamente el estado de cada paquete y retirar paquetes entregados de la lista.",
            "Mostrar información clara y actualizada de los paquetes asignados."
        ],
        "pistas": [
            "Usar listas para manejar los paquetes asignados al repartidor.",
            "Verificar la capacidad máxima antes de asignar un paquete.",
            "Cambiar el estado de los paquetes siguiendo el flujo lógico pendiente → en tránsito → entregado.",
            "Al entregar un paquete, eliminarlo de la lista de paquetes asignados."
        ],
        "ejemplo": {
            "entrada": [
                "Repartidor: Carlos (ID: R203)",
                "Asignando paquete: \"Monitor 27 pulgadas\" a dirección: Calle Falsa 123",
                "Paquete asignado correctamente.",
                "",
                "Mostrando paquetes asignados a Carlos:",
                "- Monitor 27 pulgadas -> En tránsito -> Calle Falsa 123",
                "",
                "Entregando \"Monitor 27 pulgadas\"...",
                "Estado actualizado: Entregado",
                "",
                "Paquetes restantes: ninguno"
            ],
            "salida": []
        },
        "uml": "img/uml/53.svg"
    },
    {
        "id": "54",
        "titulo": "Sistema de encuestas para evaluación de docentes",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una universidad quiere digitalizar su sistema de encuestas para que los estudiantes puedan evaluar anónimamente a sus docentes. Cada Encuesta contiene preguntas y puede ser respondida por múltiples Participantes. Cada participante puede responder sólo una vez, y sus respuestas se almacenan como una lista de números del 1 al 5 (una por pregunta). El objetivo es calcular el promedio por pregunta y mostrar estadísticas.",
        "tareas": [
            "Definir la clase Encuesta con atributos titulo, preguntas y respuestas.",
            "Implementar métodos en Encuesta: agregarPregunta(String), responder(List<Integer>) y mostrarResultados().",
            "Definir la clase Participante con método responderEncuesta(Encuesta e, List<Integer> r) para registrar respuestas.",
            "Garantizar que cada participante responda sólo una vez.",
            "Calcular el promedio por cada pregunta y mostrar resultados claros."
        ],
        "pistas": [
            "Usar listas para almacenar preguntas y respuestas de participantes.",
            "Validar que las respuestas tengan el mismo tamaño que el número de preguntas.",
            "Impedir modificaciones a respuestas ya registradas.",
            "Calcular promedios recorriendo todas las respuestas por pregunta."
        ],
        "ejemplo": {
            "entrada": [
                "Encuesta: Satisfacción del curso",
                "1. ¿El profesor explica con claridad?",
                "2. ¿El contenido fue útil?",
                "3. ¿Repetirías este curso?",
                "",
                "Respuestas recibidas:",
                "[5, 4, 5]",
                "[4, 3, 4]",
                "[3, 4, 4]",
                "",
                "Promedios:",
                "1. 4.0",
                "2. 3.6",
                "3. 4.3"
            ],
            "salida": []
        },
        "uml": "img/uml/54.svg"
    },
    {
        "id": "55",
        "titulo": "Sistema de reservas de aulas en un centro educativo",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un centro educativo quiere automatizar la reserva de aulas. Cada Aula tiene un número, una capacidad y un estado de disponibilidad. Los Usuarios pueden hacer una reserva si el aula está libre, indicando fecha y hora. Cada Reserva debe contener la información del aula, del usuario y del momento reservado.",
        "tareas": [
            "Definir la clase Aula con atributos numero, capacidad y disponible.",
            "Implementar métodos en Aula: marcarOcupada(), marcarLibre() y mostrarInfo().",
            "Definir la clase Usuario con atributos nombre e idUsuario.",
            "Definir la clase Reserva con atributos aula, usuario y fechaHora, y método mostrarResumen().",
            "Controlar que solo se pueda reservar un aula si está libre.",
            "Permitir registrar varias reservas, mostrar aulas ocupadas y liberarlas."
        ],
        "pistas": [
            "Usar composición para que Reserva contenga referencias a Aula y Usuario.",
            "Actualizar el estado del aula al reservar o liberar.",
            "Mostrar resúmenes claros de reservas.",
            "Gestionar la disponibilidad con booleanos para evitar reservas dobles."
        ],
        "ejemplo": {
            "entrada": [
                "Usuario: Ana (ID: U123)",
                "Reserva: Aula 101 - 20/06/2025 10:00",
                "Estado: aula ocupada",
                "",
                "Mostrando reservas:",
                "- Aula 101 | Usuario: Ana | Fecha: 20/06/2025 10:00",
                "",
                "Liberando aula...",
                "Estado: aula disponible"
            ],
            "salida": []
        },
        "uml": "img/uml/55.svg"
    },
    {
        "id": "56",
        "titulo": "Votación digital en comunidad vecinal",
        "nivel": "fácil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En una comunidad vecinal se va a celebrar una votación digital para decidir si se aprueba un nuevo reglamento. El sistema debe garantizar que cada vecino vote solo una vez y que los resultados sean confidenciales hasta que finalice la votación. Se debe simular todo el proceso: registro de vecinos, emisión de votos y publicación de resultados con conteo de votos y porcentaje de participación.",
        "tareas": [
            "Definir la clase Vecino con atributos nombre, dni y haVotado.",
            "Implementar método emitirVoto(Votacion votacion, String voto) que solo permita votar si no ha votado antes.",
            "Definir la clase Votacion con atributos titulo, censo (lista de Vecino), votosSi, votosNo y votantes (set de dni).",
            "Implementar métodos registrarVecino(Vecino), recibirVoto(Vecino, String) y mostrarResultados() en la clase Votacion.",
            "Controlar que un vecino solo pueda votar una vez usando haVotado y el set de votantes.",
            "Mostrar resultados finales con número de votos a favor, en contra y porcentaje de participación."
        ],
        "pistas": [
            "Usar List para almacenar vecinos registrados (censo).",
            "Usar Set para almacenar dnis de votantes y evitar votos duplicados.",
            "El método emitirVoto de Vecino debe llamar a recibirVoto de Votacion.",
            "Validar que el voto sea solo \"Sí\" o \"No\" (mayúsculas o minúsculas).",
            "Calcular participación como (número de votos emitidos / total vecinos) * 100."
        ],
        "ejemplo": {
            "entrada": [
                "Votación: Reforma del Reglamento 2025",
                "",
                "Registrando vecinos...",
                "- Pedro (DNI: 12345678A)",
                "- Laura (DNI: 87654321B)",
                "",
                "Pedro vota: Sí",
                "Laura vota: No",
                "",
                "Intento de segundo voto de Pedro: Rechazado",
                "",
                "Resultados:",
                "Votos a favor: 1",
                "Votos en contra: 1",
                "Participación: 100%"
            ],
            "salida": []
        },
        "uml": "img/uml/56.svg"
    },
    {
        "id": "57",
        "titulo": "Monitorización energética en ciudad inteligente",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En una ciudad inteligente, los edificios están conectados a una red de energía que monitoriza el consumo eléctrico horario en tiempo real. Se debe registrar el consumo por hora de cada edificio, calcular su consumo total y medio, y clasificarlos como eficientes o ineficientes según si su consumo medio es menor a 200 kWh. Este sistema ayudará a aplicar políticas de ahorro energético y generar informes automatizados.",
        "tareas": [
            "Crear la clase Edificio con atributos nombre y una lista de consumos horarios (List<Double>).",
            "Implementar métodos para registrar consumo horario, calcular consumo total y medio, y determinar si es eficiente (consumo medio < 200).",
            "Crear la clase GestorEnergetico que gestione una lista de edificios.",
            "Implementar métodos para registrar edificios y generar un informe que muestre consumo total, medio y estado de eficiencia de cada edificio.",
            "Mostrar el informe con formato claro para cada edificio registrado."
        ],
        "pistas": [
            "Usar List<Double> para almacenar consumos horarios en cada edificio.",
            "El método getConsumoTotal debe sumar todos los consumos horarios registrados.",
            "El método getConsumoMedio debe calcular la media de los consumos horarios.",
            "El método esEficiente devuelve true si el consumo medio es menor a 200 kWh.",
            "El GestorEnergetico usa una lista para almacenar múltiples edificios y recorrerlos para generar el informe."
        ],
        "ejemplo": {
            "entrada": [
                "Registrando edificio: Biblioteca Central",
                "→ Consumos horarios: 180, 190, 195, 200",
                "",
                "Registrando edificio: Torre Administrativa",
                "→ Consumos horarios: 210, 220, 215",
                "",
                "INFORME ENERGÉTICO:",
                "- Biblioteca Central:",
                "  Total: 765.0 kWh",
                "  Medio: 191.25 kWh",
                "  Estado: Eficiente",
                "",
                "- Torre Administrativa:",
                "  Total: 645.0 kWh",
                "  Medio: 215.0 kWh",
                "  Estado: Ineficiente"
            ],
            "salida": []
        },
        "uml": "img/uml/57.svg"
    },
    {
        "id": "58",
        "titulo": "Gestión de turnos en clínica veterinaria",
        "nivel": "fácil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En una clínica veterinaria moderna, se informatiza la gestión de turnos para atender mascotas en orden de llegada. El sistema debe registrar las mascotas que llegan, permitir atenderlas en orden y generar un resumen con todas las mascotas atendidas durante el día, ordenadas cronológicamente.",
        "tareas": [
            "Crear la clase Mascota con atributos nombre, especie, edad y propietario.",
            "Implementar el método toString() para mostrar la información de la mascota con formato: \"Luna (gato, 2 años), Propietario: Marta\".",
            "Crear la clase ClinicaVeterinaria con atributos colaDeTurnos (Queue de Mascota) y atendidas (List de Mascota).",
            "Implementar registrarMascota(Mascota) para añadir una mascota a la cola.",
            "Implementar atenderMascota() para atender la primera mascota de la cola y añadirla a la lista atendidas.",
            "Implementar resumenDelDia() para mostrar todas las mascotas atendidas en orden cronológico."
        ],
        "pistas": [
            "Usar una Queue para mantener el orden de llegada de las mascotas.",
            "La lista atendidas debe guardar todas las mascotas que ya fueron atendidas, en orden.",
            "El método toString de Mascota debe seguir el formato indicado para mostrar información clara.",
            "En atenderMascota, retirar la mascota de la cola y añadirla a la lista de atendidas.",
            "En resumenDelDia, recorrer la lista atendidas y mostrar cada mascota con su índice."
        ],
        "ejemplo": {
            "entrada": [
                "--- REGISTRO DE MASCOTAS ---",
                "Mascota registrada: Rocky (perro, 4 años), Propietario: Alex",
                "Mascota registrada: Mía (conejo, 1 año), Propietario: Sofía",
                "Mascota registrada: Loki (gato, 3 años), Propietario: Raúl",
                "",
                "--- ATENCIÓN VETERINARIA ---",
                "Atendiendo a: Rocky (perro, 4 años), Propietario: Alex",
                "Atendiendo a: Mía (conejo, 1 año), Propietario: Sofía",
                "Atendiendo a: Loki (gato, 3 años), Propietario: Raúl",
                "",
                "--- RESUMEN DEL DÍA ---",
                "1. Rocky (perro, 4 años), Propietario: Alex",
                "2. Mía (conejo, 1 año), Propietario: Sofía",
                "3. Loki (gato, 3 años), Propietario: Raúl"
            ],
            "salida": []
        },
        "uml": "img/uml/58.svg"
    },
    {
        "id": "59",
        "titulo": "Gestión de pedidos en panadería artesanal",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una panadería artesanal con venta por encargo necesita un sistema que permita organizar los pedidos diarios. Cada pedido incluye el nombre del cliente, una lista de productos con cantidades y si el pedido ha sido entregado. Se debe poder registrar pedidos, marcar pedidos como entregados, listar pendientes y mostrar un resumen completo.",
        "tareas": [
            "Crear la clase Producto con atributos nombre y precioUnitario.",
            "Implementar el método toString() para Producto en formato: \"Pan integral - 1.20 €\".",
            "Crear la clase Pedido con atributos cliente, items (Map<Producto, Integer>) y entregado (boolean).",
            "Implementar métodos en Pedido: marcarComoEntregado(), esEntregado(), total() que calcula el coste total, y toString() que muestre un resumen del pedido.",
            "Crear la clase Panaderia con atributo listaPedidos (List<Pedido>).",
            "Implementar en Panaderia los métodos registrarPedido(Pedido), listarPendientes() que muestre pedidos no entregados, y resumenDePedidos() que liste todos con estado."
        ],
        "pistas": [
            "Usar Map para asociar cada Producto con su cantidad en Pedido.",
            "El método total() debe sumar precioUnitario por cantidad para todos los productos.",
            "En listarPendientes() mostrar solo pedidos donde entregado es false.",
            "El toString() de Pedido debe mostrar cliente, total y estado (ENTREGADO o PENDIENTE)."
        ],
        "ejemplo": {
            "entrada": [
                "--- NUEVO PEDIDO ---",
                "Cliente: Lucía",
                "Productos:",
                "  - Croissant (3 x 0.80 €)",
                "  - Pan rústico (2 x 1.50 €)",
                "",
                "--- PEDIDO ENTREGADO ---",
                "Pedido de Lucía marcado como entregado.",
                "",
                "--- PENDIENTES ---",
                "Pedido de Juan (total: 3.00 €)",
                "",
                "--- RESUMEN ---",
                "1. Lucía - Total: 5.40 € - ENTREGADO",
                "2. Juan - Total: 3.00 € - PENDIENTE"
            ],
            "salida": []
        },
        "uml": "img/uml/59.svg"
    },
    {
        "id": "60",
        "titulo": "Gestión de envíos en empresa de mensajería",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa de mensajería nacional necesita un sistema para controlar sus envíos. Cada envío tiene un código de seguimiento, destinatario, dirección, estado actual y un historial de eventos con fechas. Se debe poder registrar envíos, actualizar su estado con eventos, consultar el estado actual y el historial, y listar los envíos que estén en tránsito.",
        "tareas": [
            "Crear la clase EventoEnvio con atributos descripcion y fecha (LocalDateTime).",
            "Implementar toString() en EventoEnvio con formato: \"12/06/2025 10:30 - En tránsito\".",
            "Crear la clase Envio con código de seguimiento, destinatario, dirección y lista de eventos.",
            "Agregar método agregarEvento(String descripcion) que añade un evento con la fecha actual.",
            "Implementar estadoActual() que devuelve la descripción del último evento.",
            "Implementar historial() que imprime todos los eventos con fecha y descripción.",
            "Sobrescribir toString() para mostrar resumen del envío.",
            "Crear la clase Mensajeria que almacena una lista de envíos.",
            "Implementar métodos registrarEnvio(Envio), buscarPorCodigo(String) y listarEnTransito() que muestre envíos cuyo último evento no sea \"Entregado\"."
        ],
        "pistas": [
            "Usar LocalDateTime.now() para crear eventos con la fecha actual.",
            "El método estadoActual() debe verificar la última posición de la lista de eventos.",
            "Para listarEnTransito(), filtrar envíos cuyo último evento no contenga \"Entregado\".",
            "El método historial() debe recorrer y mostrar todos los eventos del envío."
        ],
        "ejemplo": {
            "entrada": [
                "--- NUEVO ENVÍO ---",
                "Código: ABC123",
                "Destinatario: Ana Pérez",
                "Dirección: Calle Mayor 23, Valencia",
                "Evento: 12/06/2025 09:00 - Recogido",
                "Evento: 12/06/2025 13:00 - En tránsito",
                "",
                "--- CONSULTA ---",
                "Estado actual del envío ABC123: En tránsito",
                "Historial:",
                "  - 09:00 Recogido",
                "  - 13:00 En tránsito",
                "",
                "--- ENVÍOS EN TRÁNSITO ---",
                "1. ABC123 - Ana Pérez - En tránsito"
            ],
            "salida": []
        },
        "uml": "img/uml/60.svg"
    },
    {
        "id": "61",
        "titulo": "Gestión de préstamos y reservas en biblioteca digital",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una biblioteca digital quiere gestionar su catálogo de libros electrónicos y controlar el préstamo y la reserva de los mismos por parte de los usuarios. Cada libro tiene título, autor, ISBN, y un número total de copias digitales simultáneas disponibles. Los usuarios pueden pedir prestado un libro si hay copias libres, o reservarlo si no hay copias disponibles. Se debe registrar libros, usuarios, préstamos, reservas y consultar estado actual de libros y préstamos de usuarios.",
        "tareas": [
            "Crear clase Libro con atributos: titulo, autor, isbn, copiasTotales, copiasPrestadas y lista de reservas (IDs de usuarios).",
            "Método prestamo(String idUsuario): presta libro si hay copias disponibles, aumenta copiasPrestadas; retorna false si no.",
            "Método reserva(String idUsuario): añade ID a lista de reservas si no está ya y no hay copias disponibles.",
            "Método devolver(): reduce copiasPrestadas y si hay reservas, libera la primera para préstamo automático.",
            "Método estadoActual(): muestra copias disponibles y número de reservas.",
            "Crear clase Usuario con atributos id, nombre y lista de libros prestados.",
            "Métodos prestarLibro(Libro), devolverLibro(Libro) y listarPrestamos().",
            "Crear clase BibliotecaDigital con listas de libros y usuarios.",
            "Métodos agregarLibro(Libro), agregarUsuario(Usuario), buscarLibroPorISBN(String), buscarUsuarioPorId(String).",
            "Métodos prestamoLibro(String idUsuario, String isbn), reservaLibro(String idUsuario, String isbn) y devolverLibro(String idUsuario, String isbn)."
        ],
        "pistas": [
            "Al prestar un libro, actualizar tanto el libro (copiasPrestadas) como el usuario (lista librosPrestados).",
            "Al devolver un libro, liberar una reserva si hay usuarios esperando y asignar el préstamo a ese usuario automáticamente.",
            "La lista de reservas funciona como una cola FIFO.",
            "Verificar que un usuario no reserve o preste el mismo libro dos veces."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar libro \"Java Básico\", autor \"María Pérez\", ISBN \"12345\", 2 copias.",
                "Usuario \"U01\" solicita préstamo: éxito, copias disponibles 1.",
                "Usuario \"U02\" solicita préstamo: éxito, copias disponibles 0.",
                "Usuario \"U03\" intenta préstamo: no hay copias, se añade a reservas.",
                "Usuario \"U01\" devuelve libro: copia liberada, \"U03\" recibe préstamo automáticamente.",
                "Estado libro:",
                "- Copias disponibles: 0",
                "- Reservas: ninguna"
            ],
            "salida": []
        },
        "uml": "img/uml/61.svg"
    },
    {
        "id": "62",
        "titulo": "Gestión de alquiler y reservas de vehículos",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa de alquiler de vehículos quiere gestionar su flota y las reservas de clientes. La flota incluye coches, motos y furgonetas, cada uno con características específicas. Se deben registrar vehículos, clientes y reservas, comprobar disponibilidad, calcular costes y listar reservas activas por cliente.",
        "tareas": [
            "Crear clase abstracta Vehiculo con atributos comunes: matrícula, marca, modelo, año de fabricación y precio diario.",
            "Implementar método calcularPrecio(int dias) que calcule el coste total según días.",
            "Crear método abstracto detalles() para mostrar características específicas de cada vehículo.",
            "Crear clases derivadas: Coche (número de puertas, aire acondicionado), Moto (cilindrada), Furgoneta (capacidad de carga).",
            "Crear clase Cliente con nombre y DNI, y método mostrarDatos().",
            "Crear clase Reserva con Vehiculo, Cliente, fecha inicio y duración; método para calcular coste y mostrar resumen.",
            "Crear clase AlquilerVehiculos que gestione listas de vehículos y reservas.",
            "Implementar métodos para agregar vehículos y clientes, crear reservas verificando disponibilidad, consultar vehículos disponibles para una fecha y listar reservas activas por cliente."
        ],
        "pistas": [
            "La clase Vehiculo es abstracta y sus derivados implementan detalles específicos.",
            "La fecha se maneja como cadena para simplificar, sin cálculos reales de fechas.",
            "Para comprobar disponibilidad, no debe haber reservas superpuestas para un mismo vehículo.",
            "Calcular el coste multiplicando precio diario por número de días.",
            "Usar composición para que Reserva incluya objetos Vehiculo y Cliente."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar coche matrícula ABC123, Ford Focus 2018, 50€/día, 4 puertas, aire acondicionado.",
                "Registrar cliente Juan Pérez, DNI 12345678X.",
                "Juan reserva coche ABC123 desde 01/07/2025 por 3 días.",
                "Calcular coste total de reserva: 150€.",
                "Consultar disponibilidad coche ABC123 para 02/07/2025: no disponible.",
                "Listar reservas activas de Juan: coche Ford Focus, desde 01/07/2025 hasta 03/07/2025."
            ],
            "salida": []
        },
        "uml": "img/uml/62.svg"
    },
    {
        "id": "63",
        "titulo": "Gestión de recursos digitales en biblioteca digital",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una biblioteca digital necesita un sistema para gestionar sus recursos digitales, que incluyen libros electrónicos, revistas y audiolibros. Cada recurso tiene atributos comunes como título, autor, año de publicación y código identificativo único. Los libros electrónicos incluyen número de páginas y formato (PDF, EPUB). Las revistas tienen número de edición y periodicidad (mensual, trimestral). Los audiolibros incluyen duración en minutos y narrador. El sistema debe registrar recursos, buscar por título o autor, mostrar detalles, permitir préstamos con fecha de inicio y devolución, y consultar recursos prestados y disponibles.",
        "tareas": [
            "Crear clase abstracta RecursoDigital con atributos: codigo, titulo, autor, anioPublicacion, fechaPrestamo, fechaDevolucion.",
            "Implementar método abstracto mostrarDetalles() que retorne un String con la información completa del recurso.",
            "Crear métodos prestar(String fechaPrestamo, String fechaDevolucion) para registrar préstamo, y estaPrestado() que indica si el recurso está prestado.",
            "Crear subclases LibroElectronico (numPaginas, formato), Revista (numEdicion, periodicidad) y Audiolibro (duracionMinutos, narrador) que extiendan RecursoDigital e implementen mostrarDetalles().",
            "Crear clase BibliotecaDigital que administre una lista de RecursoDigital.",
            "Implementar métodos agregarRecurso(RecursoDigital), buscarPorTitulo(String) y buscarPorAutor(String) que devuelvan listas filtradas.",
            "Implementar método prestarRecurso(String codigo, String fechaPrestamo, String fechaDevolucion) que marque un recurso como prestado si está disponible.",
            "Implementar métodos listarPrestados() y listarDisponibles() que devuelvan listas de recursos según su estado."
        ],
        "pistas": [
            "La clase RecursoDigital es abstracta y define el contrato para mostrarDetalles y el estado del préstamo.",
            "La fecha se guarda como String para simplificar el manejo sin lógica compleja de fechas.",
            "El método estaPrestado() devuelve true si la fechaPrestamo y fechaDevolucion están definidas y vigentes.",
            "Buscar por título o autor debe ser case insensitive y devolver todos los recursos que contengan el texto buscado.",
            "Prestar un recurso solo si no está prestado actualmente.",
            "Polimorfismo: mostrarDetalles incluye atributos específicos según el tipo de recurso."
        ],
        "ejemplo": {
            "entrada": [
                "Agregar libro electrónico: código L001, 'El Quijote', Miguel de Cervantes, 1605, 1200 páginas, formato EPUB.",
                "Agregar revista: código R101, 'Tecnología Hoy', autor Varios, 2024, edición 15, periodicidad mensual.",
                "Prestar recurso L001 fecha préstamo 01/06/2025, devolución 15/06/2025.",
                "Listar recursos prestados: muestra 'El Quijote' con fechas.",
                "Buscar por autor 'Varios': muestra 'Tecnología Hoy'.",
                "Solicitar detalles de audiolibro: muestra duración y narrador."
            ],
            "salida": []
        },
        "uml": "img/uml/63.svg"
    },
    {
        "id": "64",
        "titulo": "Gestión de flota de drones y misiones en organización de rescate",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En una organización de rescate se usa una flota de drones para realizar misiones en zonas difíciles o peligrosas. Cada dron tiene un ID único, modelo, nivel de batería (porcentaje), autonomía en minutos y posición GPS (latitud y longitud). Cada misión tiene código, tipo (búsqueda, entrega, reconocimiento), estado (pendiente, en curso, completada) y descripción. El sistema debe gestionar drones y misiones, permitiendo registrar, asignar misiones solo a drones con batería ≥20% y sin misión activa, actualizar estados, y mostrar reportes. Se requiere un menú para operar hasta salir.",
        "tareas": [
            "Crear clase Dron con atributos privados: id, modelo, bateria, autonomia, latitud, longitud. Añadir getters/setters y método getEstado() que muestre estado completo del dron, incluyendo misión activa si la tiene.",
            "Crear clase Mision con atributos privados: codigo, tipo, estado, descripcion. Añadir método actualizarEstado(nuevoEstado) para cambiar estado y mostrarDetalles() para imprimir info completa.",
            "Crear clase ControlDrones que gestione listas privadas de Dron y Mision.",
            "Implementar métodos en ControlDrones: registrarDron(dron), registrarMision(mision), asignarMision(codigoMision, idDron), cambiarEstadoMision(codigoMision, nuevoEstado), mostrarDrones(), mostrarMisiones().",
            "Asegurar que no se asigne misión a dron con batería menor a 20% o que ya tenga misión activa.",
            "Validar entradas y manejar errores (por ejemplo, dron o misión inexistente, estados inválidos).",
            "Crear menú interactivo en consola que repita opciones hasta salir."
        ],
        "pistas": [
            "Usa listas (ArrayList) para almacenar drones y misiones en ControlDrones.",
            "Para asignar misión, busca dron y misión por sus identificadores, verifica condiciones y vincula la misión al dron (por ejemplo, almacenando referencia de misión en dron).",
            "El estado de misión puede ser una cadena con valores limitados: pendiente, en curso, completada.",
            "El método getEstado() de Dron debe indicar si tiene misión activa y su estado.",
            "Para el menú, usa un bucle que solicite opción y ejecute la acción correspondiente hasta elegir salir.",
            "Para simplicidad, el menú y mensajes pueden estar en español y la gestión de entradas debe contemplar posibles errores de usuario."
        ],
        "ejemplo": {
            "entrada": [
                "--- SISTEMA DE CONTROL DE DRONES ---",
                "1. Registrar dron",
                "2. Registrar misión",
                "3. Asignar misión a dron",
                "4. Cambiar estado de misión",
                "5. Mostrar drones",
                "6. Mostrar misiones",
                "7. Salir",
                "",
                "Opción: 1",
                "Introduce ID del dron: D01",
                "Introduce modelo: Falcon X1",
                "Introduce batería (%): 85",
                "Introduce autonomía (minutos): 120",
                "Introduce latitud: 41.3851",
                "Introduce longitud: 2.1734",
                "Dron registrado con éxito.",
                "",
                "Opción: 2",
                "Introduce código de misión: M100",
                "Introduce tipo (búsqueda, entrega, reconocimiento): búsqueda",
                "Introduce descripción: Buscar persona desaparecida en zona montañosa",
                "Misión registrada.",
                "",
                "Opción: 3",
                "Introduce código de misión a asignar: M100",
                "Introduce ID del dron: D01",
                "Misión asignada correctamente.",
                "",
                "Opción: 4",
                "Introduce código de misión: M100",
                "Estado actual: pendiente",
                "Introduce nuevo estado (en curso, completada): en curso",
                "Estado actualizado.",
                "",
                "Opción: 5",
                "Lista de drones:",
                "D01 - Falcon X1 - Batería: 85% - Autonomía: 120 min - Posición: (41.3851, 2.1734) - Misión activa: M100 (en curso)",
                "",
                "Opción: 6",
                "Lista de misiones:",
                "M100 - búsqueda - en curso - Buscar persona desaparecida en zona montañosa",
                "",
                "Opción: 7",
                "Adiós."
            ],
            "salida": []
        },
        "uml": "img/uml/64.svg"
    },
    {
        "id": "65",
        "titulo": "Gestión de reservas y disponibilidad en hotel moderno",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En un hotel moderno se requiere un sistema para gestionar reservas de habitaciones. Cada habitación tiene número único, tipo (individual, doble, suite) y estado (Disponible, Reservada, Ocupada). Los clientes pueden reservar indicando habitación, nombre y fechas entrada y salida. El sistema debe registrar habitaciones, validar y hacer reservas solo si la habitación está disponible para esas fechas, cambiar estado según uso y mostrar reservas activas y habitaciones libres en un rango de fechas.",
        "tareas": [
            "Crear clase Habitacion con atributos privados: numero (String), tipo (String), estado (String). Añadir getters/setters y métodos para obtener y cambiar estado.",
            "Crear clase Reserva con atributos privados: cliente (String), habitacion (Habitacion), fechaEntrada (LocalDate), fechaSalida (LocalDate). Añadir método solapaCon(otraReserva) que devuelve true si las fechas se solapan, y método mostrarDetalles() para imprimir la reserva.",
            "Crear clase Hotel que gestione listas privadas de Habitacion y Reserva.",
            "Implementar en Hotel métodos: registrarHabitacion(habitacion), hacerReserva(reserva) que valide disponibilidad y agregue si es posible, habitacionesDisponibles(inicio, fin) que devuelva lista de habitaciones libres en esas fechas, mostrarReservasActivas() que muestre reservas vigentes.",
            "En hacerReserva validar que fechaEntrada < fechaSalida y que la habitación no esté ocupada ni reservada en las fechas indicadas.",
            "Mostrar mensajes claros en caso de éxito o error en reservas."
        ],
        "pistas": [
            "Para validar disponibilidad, compara la nueva reserva con todas las reservas existentes de la misma habitación usando solapaCon().",
            "Para fechas, usa java.time.LocalDate y sus métodos isBefore(), isAfter(), equals() para la lógica.",
            "Estado de habitación debe actualizarse según reservas activas (por ejemplo, reservada si hay reserva futura, ocupada si la reserva es actual).",
            "El método habitacionesDisponibles() recorre todas las habitaciones y verifica que no haya reserva solapada en ese rango.",
            "El menú o interfaz puede ser sencillo, enfocándose en llamadas a métodos y manejo básico de entradas y salidas."
        ],
        "ejemplo": {
            "entrada": [
                "Registro de habitaciones:",
                "- Habitación 101, tipo: Individual",
                "- Habitación 102, tipo: Doble",
                "- Habitación 201, tipo: Suite",
                "",
                "Intento de reserva:",
                "Cliente: Juan Pérez",
                "Habitación: 101",
                "Entrada: 2025-07-10",
                "Salida: 2025-07-15",
                "Resultado: Reserva confirmada.",
                "",
                "Intento de reserva:",
                "Cliente: Ana Gómez",
                "Habitación: 101",
                "Entrada: 2025-07-12",
                "Salida: 2025-07-14",
                "Resultado: Error - Habitación no disponible para esas fechas.",
                "",
                "Consulta habitaciones disponibles entre 2025-07-11 y 2025-07-13:",
                "- Habitación 102 (Doble)",
                "- Habitación 201 (Suite)"
            ],
            "salida": []
        },
        "uml": "img/uml/65.svg"
    },
    {
        "id": "66",
        "titulo": "Gestión de cursos y estudiantes en plataforma online",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En una plataforma de cursos online se requiere un sistema que gestione cursos y estudiantes inscritos. Cada curso tiene nombre, código único, duración en horas y lista de estudiantes. Cada estudiante tiene nombre completo, email y ID único. El sistema debe permitir crear cursos y estudiantes, inscribir estudiantes en cursos evitando duplicados, mostrar información detallada de un curso con sus estudiantes y listar todos los cursos disponibles.",
        "tareas": [
            "Definir clase Curso con atributos privados: nombre (String), código (String), duración (int) y lista de estudiantes (List<Estudiante>). Añadir métodos para agregar estudiantes, mostrar información y listar estudiantes.",
            "Definir clase Estudiante con atributos privados: nombre completo (String), email (String), id (String). Añadir getters para los atributos.",
            "Validar que el código de curso y la ID de estudiante sean únicos (puedes controlar desde la clase que gestiona los objetos o mediante estructuras auxiliares).",
            "Al inscribir estudiantes, evitar duplicados en la lista del curso.",
            "Crear clase principal con menú que permita probar todas las funcionalidades: crear cursos, crear estudiantes, inscribir estudiantes, mostrar info curso y listar cursos.",
            "Cuidar encapsulación, uso adecuado de listas y manejo básico de excepciones o errores en entradas."
        ],
        "pistas": [
            "Puedes usar ArrayList para la lista de estudiantes en cada curso.",
            "Para evitar duplicados al inscribir, puedes comprobar si el estudiante ya está en la lista (comparando IDs).",
            "Para asegurar unicidad en códigos e IDs, mantén colecciones auxiliares (como Sets) o verifica antes de crear el objeto.",
            "Para mostrar la información, recorre la lista de estudiantes y muestra sus datos formateados.",
            "El menú principal debe pedir la opción, y según la opción ejecutar las funciones correspondientes."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Programación Java",
                "JAVA101",
                "40",
                "2",
                "Ana Pérez",
                "ana.perez@email.com",
                "1001",
                "3",
                "JAVA101",
                "1001",
                "4",
                "JAVA101",
                "5",
                "6"
            ],
            "salida": [
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 1",
                "Introduce nombre del curso: ",
                "Introduce código del curso: ",
                "Introduce duración (horas): ",
                "Curso creado correctamente.",
                "",
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 2",
                "Introduce nombre completo del estudiante: ",
                "Introduce email: ",
                "Introduce ID de estudiante: ",
                "Estudiante creado correctamente.",
                "",
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 3",
                "Introduce código del curso para inscripción: ",
                "Introduce ID del estudiante: ",
                "Estudiante inscrito en el curso JAVA101.",
                "",
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 4",
                "Introduce código del curso: ",
                "Curso: Programación Java (Código: JAVA101)",
                "Duración: 40 horas",
                "Estudiantes inscritos:",
                " - Ana Pérez (ID: 1001, Email: ana.perez@email.com)",
                "",
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 5",
                "Cursos disponibles:",
                " - JAVA101: Programación Java (40 horas)",
                "",
                "--- Plataforma de Cursos Online ---",
                "1. Crear nuevo curso",
                "2. Crear nuevo estudiante",
                "3. Inscribir estudiante en curso",
                "4. Mostrar información de un curso",
                "5. Listar todos los cursos",
                "6. Salir",
                "Opción: 6",
                "Adiós."
            ]
        },
        "uml": "img/uml/66.svg"
    },
    {
        "id": "67",
        "titulo": "Sistema de reservas de salas de reuniones",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa necesita un sistema para gestionar la reserva de salas de reuniones. Cada sala tiene un nombre único, capacidad máxima y una lista de reservas. Cada reserva está asociada a un empleado y contiene fecha, hora de inicio y duración. El sistema debe permitir registrar salas y empleados, realizar reservas comprobando que no se solapen, mostrar las reservas de una sala, y listar todas las salas con su disponibilidad actual.",
        "tareas": [
            "Definir clase Sala con atributos: nombre (String), capacidad (int) y lista de reservas (List<Reserva>). Añadir métodos para agregar reserva, mostrar reservas y comprobar disponibilidad.",
            "Definir clase Empleado con atributos: nombre completo (String), id único (String) y departamento (String). Añadir getters.",
            "Definir clase Reserva con atributos: fecha (LocalDate), horaInicio (LocalTime), duración en minutos (int) y empleado (Empleado). Añadir método para obtener hora de fin y facilitar comprobación de solapamientos.",
            "Implementar lógica para evitar reservas con horarios que se solapen en la misma sala.",
            "Crear menú en consola para registrar salas, empleados, realizar reservas, mostrar reservas de una sala y listar salas.",
            "Gestionar todas las colecciones con Listas y mantener encapsulación y buenas prácticas."
        ],
        "pistas": [
            "Usa LocalDate para fechas, LocalTime para horas y un int para duración en minutos.",
            "Para comprobar solapamientos, compara el rango horario de la nueva reserva con las existentes.",
            "Mantén una lista de salas y empleados para búsqueda rápida por nombre o ID.",
            "En el menú, muestra opciones claras y solicita la entrada correspondiente para cada acción.",
            "Al mostrar reservas, formatea bien la fecha y hora para mejor legibilidad."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Sala Norte",
                "10",
                "2",
                "Marta López",
                "EMP202",
                "Finanzas",
                "3",
                "Sala Norte",
                "2025-06-20",
                "10:00",
                "60",
                "EMP202",
                "4",
                "Sala Norte",
                "5",
                "6"
            ],
            "salida": [
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 1",
                "Nombre de la sala: ",
                "Capacidad: ",
                "Sala registrada correctamente.",
                "",
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 2",
                "Nombre del empleado: ",
                "ID: ",
                "Departamento: ",
                "Empleado registrado.",
                "",
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 3",
                "Código de sala: ",
                "Fecha (AAAA-MM-DD): ",
                "Hora de inicio (HH:MM): ",
                "Duración (min): ",
                "ID del empleado: ",
                "Reserva realizada.",
                "",
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 4",
                "Reservas para Sala Norte:",
                " - 2025-06-20 10:00 por 60 minutos (Empleado: Marta López)",
                "",
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 5",
                "Salas disponibles:",
                " - Sala Norte (10 personas)",
                "",
                "--- Sistema de Reservas de Salas ---",
                "1. Registrar nueva sala",
                "2. Registrar nuevo empleado",
                "3. Realizar reserva",
                "4. Ver reservas de una sala",
                "5. Listar todas las salas",
                "6. Salir",
                "Opción: 6",
                "Adiós."
            ]
        },
        "uml": "img/uml/67.svg"
    },
    {
        "id": "68",
        "titulo": "Simulador de combate de criaturas fantásticas",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una academia mágica entrena criaturas fantásticas para combates simulados por turnos. Cada criatura pertenece a una especie, tiene nombre, puntos de vida (HP), ataque, defensa y una habilidad especial. El sistema debe permitir crear criaturas, simular combates por turnos hasta que una quede sin HP, y registrar los resultados. Las habilidades pueden modificar temporalmente atributos y el sistema debe ser extensible con nuevas especies mediante herencia.",
        "tareas": [
            "Crear clase abstracta Criatura con atributos: nombre, especie, hp, ataque, defensa y método abstracto usarHabilidad() que devuelve un bonus de daño o curación.",
            "Crear al menos tres subclases (Dragón, Fénix, Quimera) que implementen usarHabilidad() con efectos distintos (por ejemplo, fuego, regeneración, escudo mágico).",
            "Crear clase SimuladorCombate que reciba dos criaturas y simule el combate por turnos mostrando cada acción y resultado.",
            "El daño se calcula con la fórmula: max(0, ataque_atacante - defensa_objetivo) + bonus de habilidad.",
            "Registrar el historial de cada combate y mostrar un resumen al final con ganador y puntos de vida restantes.",
            "Asegurar que el HP nunca sea negativo y que las habilidades influyan temporalmente en atributos."
        ],
        "pistas": [
            "Usa polimorfismo para que cada criatura tenga una habilidad diferente sin cambiar el simulador.",
            "El método usarHabilidad() puede devolver un int que se sume o reste al daño o hp.",
            "Alterna turnos hasta que el hp de una criatura llegue a cero o menos.",
            "Al mostrar resultados, formatea con nombre de la criatura, daño recibido, y hp restante.",
            "Guarda el historial en una lista de cadenas para luego imprimir el resumen."
        ],
        "ejemplo": {
            "entrada": [
                "Draco",
                "Dragón",
                "100",
                "30",
                "10",
                "Luxa",
                "Fénix",
                "90",
                "25",
                "15"
            ],
            "salida": [
                "=== Simulador de Combate ===",
                "Criatura 1: Draco (Especie: Dragón, HP: 100, Atq: 30, Def: 10)",
                "Criatura 2: Luxa (Especie: Fénix, HP: 90, Atq: 25, Def: 15)",
                "",
                "-- Ronda 1 --",
                "Draco ataca a Luxa",
                "Luxa recibe 15 de daño (HP restante: 75)",
                "",
                "-- Ronda 2 --",
                "Luxa activa habilidad especial: \"Renacer\" (recupera 10 HP)",
                "Luxa ataca a Draco",
                "Draco recibe 15 de daño (HP restante: 85)",
                "",
                "...",
                "",
                "Ganador: Luxa (con 20 HP restante)"
            ]
        },
        "uml": "img/uml/68.svg"
    },
    {
        "id": "69",
        "titulo": "Gestión de centro de reparaciones técnicas",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un centro de reparaciones técnicas recibe dispositivos electrónicos (móviles, ordenadores, consolas, etc.) que deben ser evaluados y reparados por técnicos especializados. Cada dispositivo genera una orden con información del cliente, problema, estado y coste estimado. El sistema debe permitir registrar dispositivos, crear órdenes, asignar técnicos según especialidad, cambiar estados y generar un informe con todas las órdenes finalizadas y el total recaudado.",
        "tareas": [
            "Crear clase abstracta Dispositivo con atributos comunes marca, modelo, número de serie y método abstracto getDescripcion().",
            "Crear subclases Movil, Ordenador y Consola con atributos específicos y que implementen getDescripcion().",
            "Crear clase OrdenReparacion con atributos cliente, dispositivo, problema, técnico asignado (opcional), estado (enum) y coste estimado.",
            "Crear clase Tecnico con nombre y lista de especialidades.",
            "Crear clase CentroReparaciones que gestione la lista de técnicos y órdenes, permita asignar técnicos a órdenes según especialidad, cambiar el estado de las órdenes y generar un informe final con órdenes finalizadas y total recaudado.",
            "Controlar que una orden sólo puede finalizarse si tiene técnico asignado.",
            "Usar un Enum EstadoReparacion con los valores Pendiente, En_Proceso y Finalizada."
        ],
        "pistas": [
            "Usa polimorfismo para que cada tipo de dispositivo tenga su propia descripción.",
            "Comprueba la especialidad del técnico para asignarlo a la orden correctamente.",
            "El método cambiarEstado debe validar que sólo se pueda poner Finalizada si hay técnico asignado.",
            "En el informe, muestra cada orden finalizada con cliente, modelo y coste, y luego el total recaudado.",
            "Usa listas para almacenar técnicos y órdenes en el CentroReparaciones."
        ],
        "ejemplo": {
            "entrada": [
                "Crear orden para cliente Ana López, dispositivo Móvil Samsung Galaxy S20, problema Pantalla rota",
                "Asignar técnico especializado a la orden",
                "Cambiar estado a En Proceso",
                "Cambiar estado a Finalizada con coste 120.0",
                "Crear orden para cliente Pedro Ruiz, dispositivo Consola Sony PS5, problema Lector no funciona",
                "Asignar técnico especializado a la orden",
                "Cambiar estado a Finalizada con coste 80.0",
                "Generar informe final"
            ],
            "salida": [
                "Orden creada para cliente: Ana López",
                "Dispositivo: Móvil Samsung Galaxy S20",
                "Problema: Pantalla rota",
                "Estado: Pendiente",
                "",
                "Asignando técnico especializado... Técnico asignado: Luis García (especialista en móviles)",
                "",
                "Actualizando estado a: En Proceso...",
                "Reparación finalizada. Coste: 120.0 €",
                "",
                "Orden creada para cliente: Pedro Ruiz",
                "Dispositivo: Consola Sony PS5",
                "Problema: Lector no funciona",
                "Estado: Pendiente",
                "",
                "Asignando técnico especializado... Técnico asignado: Marta Pérez (especialista en consolas)",
                "",
                "Reparación finalizada. Coste: 80.0 €",
                "",
                "--- Informe Final ---",
                "Órdenes finalizadas:",
                "1. Ana López - Galaxy S20 - 120.0 €",
                "2. Pedro Ruiz - PS5 - 80.0 €",
                "Total recaudado: 200.0 €"
            ]
        },
        "uml": "img/uml/69.svg"
    },
    {
        "id": "70",
        "titulo": "Sistema inteligente de gestión de cultivos en invernaderos",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa agrícola ha desarrollado un sistema inteligente para gestionar cultivos en invernaderos automatizados. Cada invernadero contiene cultivos como tomates, lechugas o fresas, y sensores que miden temperatura, humedad y niveles de agua. El sistema debe registrar cultivos, controlar condiciones ambientales, detectar alertas y generar informes de seguimiento. Se debe usar clases, herencia y composición para permitir la extensión del modelo a otros cultivos y sensores.",
        "tareas": [
            "Crear clase abstracta Cultivo con atributos nombre, tipo, fecha de siembra y estado de crecimiento (enum).",
            "Crear subclases Tomate, Lechuga, Fresa que extiendan Cultivo y tengan un método verCondicionesOptimas() específico.",
            "Crear clase Sensor con tipo (temperatura, humedad, agua) y valor actual.",
            "Crear clase Invernadero que contenga listas de cultivos y sensores, con métodos para registrar cultivos, actualizar sensores y detectar alertas según umbrales.",
            "Crear clase ControladorAgricola que gestione múltiples invernaderos, permita ver alertas globales y generar informes de seguimiento.",
            "Definir enum EstadoCrecimiento con valores Semilla, Brotando, Creciendo y Listo."
        ],
        "pistas": [
            "El método detectarAlertas() debe generar mensajes cuando temperatura >35°C o <5°C, humedad <30%, o nivel de agua <20%.",
            "El informe debe listar cultivos con su nombre, fecha de siembra, estado actual y los valores más recientes de los sensores.",
            "Usa herencia para definir cultivos específicos con comportamientos particulares.",
            "Usa composición para que Invernadero tenga listas de Cultivo y Sensor.",
            "Controla bien las fechas y enum para el estado de crecimiento."
        ],
        "ejemplo": {
            "entrada": [
                "Crear invernadero #1",
                "Registrar sensor temperatura con valor 38",
                "Registrar sensor humedad con valor 45",
                "Registrar sensor agua con valor 15",
                "Registrar cultivo Tomate cherry, sembrado 2025-03-15, estado Creciendo",
                "Registrar cultivo Lechuga romana, sembrado 2025-04-01, estado Brotando",
                "Detectar alertas",
                "Generar informe seguimiento"
            ],
            "salida": [
                "Invernadero #1",
                "Sensor temperatura: 38 °C Alerta: temperatura demasiado alta",
                "Sensor humedad: 45 %",
                "Sensor agua: 15 % Alerta: falta de agua",
                "",
                "Cultivos:",
                "- Tomate cherry (Sembrado el 2025-03-15) Estado: Creciendo",
                "- Lechuga romana (Sembrado el 2025-04-01) Estado: Brotando",
                "",
                "Informe de seguimiento generado correctamente."
            ]
        },
        "uml": "img/uml/70.svg"
    },
    {
        "id": "71",
        "titulo": "Sistema de gestión de torneos oficiales de ajedrez",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "La Federación Internacional de Ajedrez requiere un sistema orientado a objetos para gestionar torneos oficiales. Cada torneo contiene jugadores, partidas y permite calcular clasificaciones finales. El sistema debe controlar datos personales, resultados, emparejamientos por ranking, y generar informes de rendimiento acumulado en varios torneos.",
        "tareas": [
            "Crear clase Jugador con atributos nombre, nacionalidad, ELO y lista de partidas jugadas.",
            "Crear clase Partida que registre dos jugadores, resultado (1-0, 0-1, 0.5-0.5), fecha y número de ronda.",
            "Crear clase Torneo con nombre, ubicación, fecha, lista de jugadores y lista de partidas.",
            "Implementar método emparejarJugadores() que cree parejas según ranking, evitando repeticiones o enfrentamientos contra sí mismo.",
            "Método actualizarClasificacion() para calcular puntos totales por jugador, ordenados por puntos y ELO.",
            "Crear clase FederacionAjedrez que gestione varios torneos, permita añadir torneos y consultar rendimiento histórico de un jugador."
        ],
        "pistas": [
            "Usa listas para almacenar jugadores y partidas.",
            "Controla que un jugador no se enfrente dos veces contra el mismo rival.",
            "El historial de un jugador debe contener todas sus partidas con detalles de rivales y resultados.",
            "Para clasificaciones, ordena primero por puntos acumulados y luego por ELO en caso de empate.",
            "El sistema de puntuación es 1 para victoria, 0.5 para empate y 0 para derrota."
        ],
        "ejemplo": {
            "entrada": [
                "Crear torneo 'Open Internacional de Praga' en 2025-06-15",
                "Agregar jugadores: Magnus Carlsen (ELO 2865), Hikaru Nakamura (ELO 2750), Anish Giri (ELO 2760), Fabiano Caruana (ELO 2820)",
                "Registrar partidas ronda 3:",
                "- Magnus Carlsen vs Hikaru Nakamura: 1-0.5",
                "- Anish Giri vs Fabiano Caruana: 0-1",
                "Actualizar clasificación",
                "Mostrar clasificación"
            ],
            "salida": [
                "Torneo: Open Internacional de Praga",
                "Ronda 3:",
                "- Magnus Carlsen (1) vs Hikaru Nakamura (0.5)",
                "- Anish Giri (0) vs Fabiano Caruana (1)",
                "",
                "Clasificación:",
                "1. Fabiano Caruana – 3.0 pts",
                "2. Magnus Carlsen – 2.5 pts",
                "3. Hikaru Nakamura – 2.0 pts",
                "4. Anish Giri – 1.5 pts"
            ]
        },
        "uml": "img/uml/71.svg"
    },
    {
        "id": "72",
        "titulo": "Sistema de reservas deportivas universitarias",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una universidad desea crear una aplicación orientada a objetos que permita a estudiantes y personal reservar instalaciones deportivas como canchas, campos o gimnasios. El sistema debe permitir registrar usuarios, consultar la disponibilidad de las instalaciones, realizar o cancelar reservas y ver el historial de uso. Se requiere que cada instalación tenga un horario y reglas claras, y que los usuarios respeten límites de tiempo y cantidad de reservas. El sistema debe estar preparado para futuras extensiones como pagos o integración con calendarios.",
        "tareas": [
            "Crear clase Instalacion con nombre, tipo (tenis, fútbol, gimnasio), horario de apertura y cierre, y lista de reservas.",
            "Crear clase Usuario con nombre, ID universitario, tipo (estudiante o personal) y lista de reservas realizadas.",
            "Crear clase Reserva que registre el usuario, la instalación, fecha, hora de inicio, hora de fin y estado (confirmada o cancelada).",
            "Crear clase SistemaReservas con lista de usuarios e instalaciones.",
            "Implementar método para registrar usuarios.",
            "Permitir consultar la disponibilidad de una instalación en una fecha y hora determinadas.",
            "Permitir hacer reservas, validando reglas: sin solapamientos, máximo 2 horas por día, dentro del horario permitido y con menos de 3 reservas activas por usuario.",
            "Permitir cancelar reservas.",
            "Permitir ver historial de reservas por usuario, incluyendo las canceladas."
        ],
        "pistas": [
            "El horario puede representarse como enteros (por ejemplo, 8 para las 08:00 y 21 para las 21:00).",
            "Para validar reservas activas, excluye las canceladas y futuras vencidas.",
            "Una reserva no puede coincidir ni solaparse con otra en la misma instalación.",
            "El historial debe mostrar fecha, rango horario, instalación y estado de cada reserva.",
            "Puedes usar objetos datetime.date para manejar fechas, pero puedes simplificar si lo deseas."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar usuario: Ana Torres (estudiante)",
                "Agregar instalación: Cancha Tenis 2 (8-22h)",
                "Consultar disponibilidad el 10/04/2025 entre 10:00 y 11:00",
                "Realizar reserva: Ana, Cancha Tenis 2, 10/04/2025, 10:00-11:00",
                "Consultar historial de Ana"
            ],
            "salida": [
                "Usuario registrado: Ana Torres (ID generado)",
                "Instalación añadida: Cancha Tenis 2 (Tenis) disponible de 08:00 a 22:00",
                "Instalación disponible: Cancha Tenis 2 – 10:00 a 11:00",
                "Reserva realizada con éxito",
                "Historial de Ana:",
                "- Cancha Tenis 2 | 10/04/2025 | 10:00-11:00 | Confirmada",
                "- Gimnasio       | 03/04/2025 | 18:00-19:00 | Cancelada"
            ]
        },
        "uml": "img/uml/72.svg"
    },
    {
        "id": "73",
        "titulo": "Gestor de colecciones de cartas",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Estás desarrollando un sistema orientado a objetos para una aplicación de coleccionismo de cartas, como las de juegos de fantasía, estrategia o deportes. Cada carta posee atributos únicos como su nombre, tipo (por ejemplo, mágica, criatura, artefacto), rareza (común, rara, épica, legendaria), puntos de ataque y defensa. Los usuarios pueden crear colecciones personales, añadir y quitar cartas de ellas, e intercambiar cartas con otros usuarios. El sistema debe también permitir obtener estadísticas sobre las cartas (como cuántas hay por rareza o cuál es la más poderosa), y permitir buscar cartas globalmente. Para asegurar la integridad, las cartas no pueden duplicarse dentro de una misma colección, y los intercambios deben ser justos y validados por ambas partes. Además, debe existir un sistema para clonar colecciones a modo de copia de seguridad.",
        "tareas": [
            "Crear una clase Carta con los atributos: nombre, tipo, rareza, ataque y defensa.",
            "Crear una clase Coleccion con nombre, propietario (objeto Usuario) y lista de cartas.",
            "Añadir métodos a Coleccion para agregar, eliminar y buscar cartas, así como obtener estadísticas y clonar la colección.",
            "Crear una clase Usuario con nombre, identificador único y una lista de colecciones.",
            "Incluir en Usuario un método para intercambiar cartas con otro usuario, asegurando que ambas partes entregan algo.",
            "Crear clase GestorCartas que gestione usuarios y permita registrar nuevas cartas y buscar cartas globalmente por nombre."
        ],
        "pistas": [
            "Una colección no puede contener la misma carta dos veces.",
            "La rareza puede ser una cadena: común, rara, épica o legendaria.",
            "El método clonar debe devolver una nueva instancia con las mismas cartas, pero independiente.",
            "El intercambio debe ser justo: si uno entrega una carta, el otro debe también entregar al menos una.",
            "Usa métodos auxiliares para buscar cartas por nombre dentro de usuarios y colecciones."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar usuario: Mario",
                "Crear colección 'Fantasía' para Mario",
                "Registrar carta: Dragón Azul (criatura, épica, 3000 ATK, 2500 DEF)",
                "Mario añade Dragón Azul a 'Fantasía'",
                "Mostrar estadísticas de 'Fantasía'",
                "Registrar usuario: Ana",
                "Registrar cartas: Elfo Guardián y Hechizo Espejo",
                "Ana añade Elfo Guardián a su colección",
                "Mario y Ana intercambian: Mario da Elfo Guardián, Ana da Hechizo Espejo"
            ],
            "salida": [
                "Usuario Mario registrado",
                "Colección 'Fantasía' creada para Mario",
                "Carta registrada: Dragón Azul (épica)",
                "Carta añadida a la colección 'Fantasía'",
                "Estadísticas de Fantasía:",
                "- Comunes: 0",
                "- Raras: 0",
                "- Épicas: 1",
                "- Legendarias: 0",
                "- Carta con más ataque: Dragón Azul (3000 ATK)",
                "Usuario Ana registrado",
                "Cartas registradas: Elfo Guardián, Hechizo Espejo",
                "Carta añadida a la colección de Ana",
                "Intercambio entre Mario y Ana completado:",
                "- Mario entregó: Elfo Guardián",
                "- Ana entregó: Hechizo Espejo"
            ]
        },
        "uml": "img/uml/73.svg"
    },
    {
        "id": "74",
        "titulo": "Sistema de reservas de salas de estudio",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una universidad quiere implementar un sistema para gestionar las reservas de salas de estudio distribuidas en sus bibliotecas. Cada sala puede tener una capacidad específica, distintos equipamientos (como proyector, pizarra, ventilación), y franjas horarias reservables por los estudiantes. Los estudiantes registrados en el sistema deben poder consultar la disponibilidad de salas, realizar reservas para una hora concreta, cancelarlas si es necesario y reportar cualquier incidencia. Es importante que no se permitan reservas que se solapen, que cada estudiante tenga un límite de reservas por día (máximo dos), y que todo quede registrado para auditorías. El sistema debe estar modelado con clases que representen las salas, las reservas, los estudiantes, el gestor general del sistema y los reportes de incidencias.",
        "tareas": [
            "Crear la clase SalaEstudio con identificador, capacidad, ubicación, equipamiento y lista de reservas.",
            "Incluir en SalaEstudio métodos para comprobar disponibilidad por franja horaria y realizar reservas.",
            "Crear la clase Reserva con el estudiante que reservó, la sala reservada y los horarios de inicio y fin.",
            "Crear la clase Estudiante con nombre, ID, historial de reservas y método para cancelar reservas.",
            "Diseñar la clase GestorReservas con listas de estudiantes, salas e incidencias.",
            "Añadir a GestorReservas los métodos para buscar salas por criterios, registrar reservas con validación de solapamientos y registrar incidencias.",
            "Crear la clase Incidencia para anotar problemas reportados en una sala, con descripción y fecha."
        ],
        "pistas": [
            "Cada reserva debe ocupar una franja horaria completa (por ejemplo, de 15:00 a 16:00).",
            "Rechaza automáticamente cualquier reserva que se solape parcial o totalmente con otra.",
            "Lleva un registro por fecha de cuántas reservas tiene cada estudiante.",
            "El método registrarReserva del GestorReservas debe verificar disponibilidad, el límite diario y evitar solapamientos.",
            "Registra todas las reservas e incidencias en logs internos para permitir su auditoría."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar estudiante: Laura (ID 1032)",
                "Registrar sala: Sala 5, capacidad 6, edificio Norte, equipamiento: pizarra, proyector",
                "Laura reserva Sala 5 de 15:00 a 17:00",
                "Laura intenta reservar Sala 5 de 16:00 a 17:00",
                "Registrar incidencia en Sala 3: 'No funciona el proyector'",
                "Laura reserva Sala 1 de 18:00 a 19:00",
                "Laura intenta hacer una tercera reserva hoy"
            ],
            "salida": [
                "Estudiante Laura registrado (ID 1032)",
                "Sala 5 registrada en Edificio Norte",
                "Reserva confirmada: Sala 5 de 15:00 a 17:00 para Laura",
                "Error: La sala ya está ocupada entre 16:00 y 17:00",
                "Incidencia registrada en Sala 3: No funciona el proyector",
                "Reserva confirmada: Sala 1 de 18:00 a 19:00 para Laura",
                "Error: Laura ya tiene 2 reservas hoy (límite alcanzado)"
            ]
        },
        "uml": "img/uml/74.svg"
    },
    {
        "id": "75",
        "titulo": "Competencia anual de robots autónomos",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Cada año, una empresa de robótica organiza una competencia donde distintos modelos de robots autónomos deben superar circuitos con obstáculos y tareas. Cada robot tiene un nombre, una velocidad y una cantidad limitada de energía, y debe enfrentarse a una secuencia de tareas que pueden incluir esquivar, empujar o cargar objetos. El sistema debe permitir registrar diferentes tipos de robots con estrategias distintas, modelar los tipos de tareas con dificultad y requisitos energéticos, y simular el comportamiento de cada robot al enfrentar el circuito. La simulación debe calcular el rendimiento de cada robot y permitir comparar resultados. Además, se debe tener en cuenta que los robots no pueden completar tareas para las que no tienen suficiente energía, y que ciertas clases de robot tienen ventajas o desventajas según el tipo de tarea.",
        "tareas": [
            "Crear una clase abstracta Robot con atributos nombre, velocidad, energía y un método abstracto ejecutarTarea(Tarea t).",
            "Diseñar clases concretas como RobotExplorador o RobotCargador que implementen ejecutarTarea según sus ventajas o desventajas con ciertos tipos de tareas.",
            "Crear la clase Tarea con tipo (por ejemplo: esquivar, cargar, empujar), dificultad y energía requerida.",
            "Diseñar la clase Circuito con una lista de tareas que puedan simularse con cualquier robot.",
            "Crear la clase Resultado que almacene el número de tareas superadas, energía final y tiempo estimado.",
            "Desarrollar la clase CompetenciaRobots, que registre todos los robots participantes, simule el circuito con cada uno y determine el ganador según la cantidad de tareas completadas."
        ],
        "pistas": [
            "Puedes asumir que el tiempo total es proporcional a la cantidad de tareas completadas y la velocidad del robot.",
            "Un robot solo podrá ejecutar una tarea si tiene suficiente energía restante.",
            "Las subclases de Robot pueden tener multiplicadores de energía según el tipo de tarea (por ejemplo, un RobotCargador gasta menos energía al cargar).",
            "Cada robot debe recibir su Resultado al terminar la simulación del circuito.",
            "Puedes extender el sistema fácilmente añadiendo nuevas clases hijas de Robot o nuevos tipos de Tarea en el futuro."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar robot: Atlas-7 (Explorador), velocidad 3, energía 100",
                "Crear tareas: [Esquivar (dificultad 3, energía 10), Empujar (dificultad 5, energía 30)]",
                "Simular circuito con robot Atlas-7",
                "Mostrar resultados"
            ],
            "salida": [
                "Iniciando simulación del circuito para robot: Atlas-7 (Explorador)",
                "Tarea 1: Esquivar obstáculo (dificultad: 3) → Completada.",
                "Tarea 2: Empujar bloque (dificultad: 5) → Falló por falta de energía.",
                "Resultado final: 1 tarea completada, energía restante: 20, tiempo total: 180s",
                "Ganador de la competencia: RoboMax con 4 tareas completadas"
            ]
        },
        "uml": "img/uml/75.svg"
    },
    {
        "id": "76",
        "titulo": "Sistema de reservas para parque de aventuras",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un parque de aventuras ofrece actividades al aire libre como tirolina, escalada y rafting. Se necesita un sistema orientado a objetos que gestione reservas de grupos en distintas actividades y horarios, garantizando que no se exceda la capacidad máxima en cada franja horaria. El sistema debe permitir consultar disponibilidad, hacer reservas, cancelar o modificar reservas y agregar nuevas actividades o modificar horarios sin alterar las clases principales. Cada reserva vincula un grupo con un número de personas a una actividad y un horario determinado.",
        "tareas": [
            "Crear la clase Actividad con nombre, capacidad máxima y lista de horarios.",
            "Crear la clase Horario que contenga la franja horaria (inicio y fin), plazas máximas y plazas reservadas.",
            "Diseñar la clase Reserva que vincule grupo, número de personas, actividad y horario.",
            "Crear la clase ParqueAventuras que registre actividades y reservas, y permita reservar, cancelar, modificar y consultar disponibilidad.",
            "Validar que las reservas no superen las plazas disponibles para el horario y actividad indicados.",
            "Implementar ordenación de reservas por actividad y horario para su listado."
        ],
        "pistas": [
            "Para modificar una reserva, verifica primero la disponibilidad en el nuevo horario antes de cambiarla.",
            "Mantén la lista de reservas actualizada al cancelar o modificar una reserva.",
            "La capacidad máxima de la actividad puede usarse para validar las plazas máximas por horario.",
            "Considera usar estructuras de datos que permitan buscar actividades y horarios eficientemente.",
            "Las clases deben permitir agregar nuevas actividades y horarios sin necesidad de modificar el diseño principal."
        ],
        "ejemplo": {
            "entrada": [
                "Actividad: Tirolina, horarios: 10:00-12:00 (plazas max 5), 12:00-14:00 (plazas max 7)",
                "Reservar 4 plazas para grupo 'Explorers' en Tirolina 10:00-12:00",
                "Reservar 3 plazas para grupo 'Aventureros' en Tirolina 10:00-12:00",
                "Listar reservas"
            ],
            "salida": [
                "Reserva realizada correctamente para grupo 'Explorers'.",
                "No hay plazas suficientes para grupo 'Aventureros' en el horario seleccionado.",
                "Reservas:",
                "- Explorers: Tirolina 10:00-12:00, 4 plazas"
            ]
        },
        "uml": "img/uml/76.svg"
    },
    {
        "id": "77",
        "titulo": "Gestión de reservas para clases grupales en gimnasio",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un gimnasio quiere digitalizar la gestión de reservas para sus clases grupales como yoga, spinning y pilates, con horarios y capacidad limitada. Se necesita un sistema orientado a objetos que permita registrar usuarios, inscribirlos o cancelar sus reservas en clases específicas, controlar que no se sobrepase la capacidad ni se produzcan conflictos de horario, y consultar la disponibilidad y el historial de reservas de cada usuario.",
        "tareas": [
            "Crear la clase Clase con atributos nombre, horario, capacidad máxima y lista de usuarios inscritos.",
            "Crear la clase Usuario con atributos nombre, ID y lista de clases reservadas.",
            "Crear la clase Reserva que relacione un usuario con una clase y registre la fecha de reserva.",
            "Diseñar la clase Gimnasio que gestione el registro de clases y usuarios, inscripción y cancelación de reservas con validaciones de capacidad y conflictos de horario.",
            "Permitir consultar las clases disponibles, usuarios inscritos en cada clase y el historial de reservas por usuario.",
            "Implementar la validación para evitar que un usuario reserve dos clases que se solapen en horario."
        ],
        "pistas": [
            "El horario puede representarse como un String, pero para validar conflictos, considera transformarlo en un formato comparable (por ejemplo, minutos desde medianoche).",
            "Al cancelar una reserva, recuerda liberar la plaza para permitir nuevas inscripciones.",
            "Las listas de clases y usuarios deben mantenerse consistentes ante cambios en reservas.",
            "Implementa métodos en Usuario y Clase para añadir y eliminar reservas de forma sincronizada.",
            "Para el historial, guarda todas las reservas aunque hayan sido canceladas, si quieres mantener registro completo."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar clase Yoga 18:00 (capacidad 10)",
                "Registrar usuario Carlos",
                "Carlos reserva plaza en Yoga",
                "Carlos intenta reservar Spinning 18:00",
                "Carlos cancela reserva en Yoga",
                "Listar usuarios inscritos en Yoga"
            ],
            "salida": [
                "Clase Yoga registrada correctamente.",
                "Usuario Carlos registrado correctamente.",
                "Reserva confirmada para Carlos en Yoga.",
                "Error: conflicto de horario para Carlos al reservar Spinning.",
                "Reserva de Carlos en Yoga cancelada.",
                "Usuarios inscritos en Yoga: []",
                "Plazas libres en Yoga: 10"
            ]
        },
        "uml": "img/uml/77.svg"
    },
    {
        "id": "78",
        "titulo": "Gestión de proyectos, tareas y empleados en empresa de software",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa de desarrollo de software desea gestionar sus proyectos y tareas internas para organizar mejor a sus empleados y prioridades. El sistema debe permitir crear varios proyectos, cada uno con tareas asignadas a empleados, controlar prioridades y estados de tareas, actualizar estados y consultar tareas por proyecto o empleado, siempre validando fechas y evitando duplicados.",
        "tareas": [
            "Crear clase Proyecto con nombre, descripción y lista de tareas.",
            "Crear clase Tarea con descripción, prioridad (enum), estado (enum), fecha límite y empleado asignado.",
            "Crear clase Empleado con nombre, ID y lista de tareas asignadas.",
            "Implementar métodos para agregar tareas a proyectos, asignar tareas a empleados y cambiar el estado de las tareas.",
            "Permitir listar tareas por proyecto o por empleado y filtrar por prioridad o estado.",
            "Validar que la fecha límite de una tarea sea posterior a la fecha actual.",
            "Prevenir duplicados en las listas de proyectos, tareas y empleados.",
            "No permitir crear tareas sin empleado asignado."
        ],
        "pistas": [
            "Usa enum para Prioridad con valores ALTA, MEDIA, BAJA.",
            "Usa enum para Estado con valores PENDIENTE, EN_PROGRESO, COMPLETADA.",
            "Para validar fechas, utiliza java.util.Date o java.time.LocalDate y compara con la fecha actual.",
            "Asegúrate de sincronizar las listas cuando asignes una tarea a un empleado y cuando la agregues a un proyecto.",
            "Cuando cambies estado de una tarea, actualiza solo si el nuevo estado es diferente y válido.",
            "Al listar tareas, permite filtros para obtener solo las de un estado o prioridad específicos."
        ],
        "ejemplo": {
            "entrada": [
                "Crear proyecto 'App Móvil Cliente'",
                "Agregar tarea 'Diseñar interfaz' con prioridad ALTA para empleado Ana, fecha límite 2025-07-01",
                "Empleado Ana inicia tarea 'Diseñar interfaz'",
                "Listar tareas para Ana",
                "Empleado Ana completa la tarea"
            ],
            "salida": [
                "Proyecto 'App Móvil Cliente' creado.",
                "Tarea 'Diseñar interfaz' añadida a proyecto y asignada a Ana.",
                "Estado de tarea 'Diseñar interfaz' actualizado a EN_PROGRESO.",
                "Tareas de Ana:\n - Diseñar interfaz (Proyecto: App Móvil Cliente) - Estado: EN_PROGRESO, Prioridad: ALTA",
                "Estado de tarea 'Diseñar interfaz' actualizado a COMPLETADA."
            ]
        },
        "uml": "img/uml/78.svg"
    },
    {
        "id": "79",
        "titulo": "Gestión de reservas de mesas en restaurante",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un restaurante quiere gestionar las reservas de mesas para optimizar el uso de su espacio y mejorar la atención al cliente. Cada mesa tiene un número identificador y una capacidad máxima. Los clientes reservan indicando nombre, número de personas y horario. El sistema debe permitir registrar mesas y reservas, validar capacidad, evitar reservas duplicadas y consultar o cancelar reservas por mesa y día.",
        "tareas": [
            "Crear clase Mesa con número, capacidad y lista de reservas.",
            "Crear clase Reserva con nombre cliente, número de personas y horario (formato \"HH:mm\" simplificado).",
            "Métodos para agregar y cancelar reservas en una mesa con validación de capacidad y horarios no duplicados.",
            "Consultar reservas de una mesa para un día (se asume reservas en un único día).",
            "Mostrar estado general de las mesas indicando qué horarios están ocupados o libres.",
            "Prevenir reservas duplicadas en la misma mesa y horario."
        ],
        "pistas": [
            "Usar List<Reserva> para almacenar reservas dentro de Mesa.",
            "Para validar capacidad, comparar numPersonas con capacidad de la mesa.",
            "Al agregar reserva, comprobar que no exista otra reserva con mismo horario y mesa.",
            "La cancelación debe buscar la reserva por cliente y horario.",
            "Para mostrar estado, imprimir horarios ocupados y libres según las reservas actuales."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar mesa 1 con capacidad 4",
                "Registrar mesa 2 con capacidad 6",
                "Cliente Ana reserva mesa 1 para 3 personas a las 20:00",
                "Cliente Luis intenta reservar mesa 1 para 5 personas a las 21:00",
                "Consultar reservas de mesa 1",
                "Cancelar reserva de Ana en mesa 1",
                "Consultar reservas de mesa 1"
            ],
            "salida": [
                "Mesa 1 registrada con capacidad 4",
                "Mesa 2 registrada con capacidad 6",
                "Reserva confirmada para Ana en mesa 1 a las 20:00",
                "Error: capacidad insuficiente en mesa 1",
                "Reservas mesa 1:\n- Ana, 3 personas, 20:00",
                "Reserva de Ana cancelada en mesa 1",
                "Reservas mesa 1:\n(ninguna reserva)"
            ]
        },
        "uml": "img/uml/79.svg"
    },
    {
        "id": "80",
        "titulo": "Gestión de animales en zoológico con herencia y polimorfismo",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Eres responsable de desarrollar un programa para un zoológico que registre diferentes especies de animales, cada una con sus características, dieta y comportamiento propio. Debe permitir añadir, eliminar y listar animales, alimentar y hacer emitir sonidos a todos los animales, con validación de dietas y comportamientos específicos según el tipo de animal.",
        "tareas": [
            "Crear clase base Animal con atributos privados: nombre, edad, tipoDieta (enum Dieta).",
            "Implementar métodos emitirSonido(), alimentar(String comida), mostrarInformacion() en Animal, con polimorfismo para que cada subclase tenga su versión.",
            "Crear enumeración Dieta con valores HERBIVORO, CARNIVORO, OMNIVORO.",
            "Crear clases derivadas Leon, Loro y Serpiente, cada una con su sonido, validación de dieta y comportamiento particular.",
            "Implementar clase Zoologico que maneje una lista de animales y métodos para añadir, eliminar, listar, alimentar y emitir sonidos a todos.",
            "Construir un menú interactivo para usar todas las funcionalidades."
        ],
        "pistas": [
            "Usa encapsulamiento para los atributos.",
            "El método alimentar debe verificar si la comida es adecuada según la dieta del animal y mostrar mensajes apropiados.",
            "El polimorfismo se usa para que emitirSonido y alimentar tengan comportamientos distintos según la clase.",
            "La lista de animales se puede implementar con ArrayList<Animal>.",
            "El menú puede usar Scanner para interactuar con el usuario."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Loro",
                "Pepe",
                "3",
                "OMNIVORO",
                "3",
                "4",
                "frutas",
                "5",
                "6"
            ],
            "salida": [
                "--- MENÚ ZOOLÓGICO ---",
                "1. Añadir animal",
                "2. Eliminar animal",
                "3. Listar animales",
                "4. Alimentar animales",
                "5. Hacer emitir sonido a todos los animales",
                "6. Salir",
                "Opción: 1",
                "Introduce tipo de animal (Leon, Loro, Serpiente): Loro",
                "Nombre: Pepe",
                "Edad: 3",
                "Tipo alimentación (HERBIVORO, CARNIVORO, OMNIVORO): OMNIVORO",
                "Animal añadido correctamente.",
                "--- MENÚ ZOOLÓGICO ---",
                "3",
                "Animales en el zoológico:",
                "- Loro 'Pepe', Edad: 3, Dieta: OMNIVORO",
                "  Comportamiento: Puede repetir frases.",
                "--- MENÚ ZOOLÓGICO ---",
                "4",
                "Introduce comida para alimentar: frutas",
                "Alimentando a Pepe con frutas... Comida adecuada. Pepe está feliz.",
                "--- MENÚ ZOOLÓGICO ---",
                "5",
                "Pepe dice: ¡Hola!",
                "--- MENÚ ZOOLÓGICO ---",
                "6",
                "Adiós"
            ]
        },
        "uml": "img/uml/80.svg"
    },
    {
        "id": "81",
        "titulo": "Gestión de vuelos y pasajeros en aerolínea con POO y colecciones",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una aerolínea desea desarrollar un sistema orientado a objetos en Java para gestionar sus vuelos y pasajeros. El sistema debe permitir crear vuelos, gestionar su estado, registrar pasajeros en cada vuelo y consultar información relevante. Cada vuelo tiene un código único, una ruta (origen y destino), una hora programada de salida, duración estimada y un estado que puede cambiar según la situación. El sistema debe garantizar que no se asignen asientos duplicados, permitir cancelaciones y mostrar estadísticas básicas.",
        "tareas": [
            "Crear la clase Vuelo con atributos privados: código vuelo (String), origen, destino, horaSalida (LocalDateTime), duración (int), estado (enum EstadoVuelo), lista de pasajeros.",
            "Crear la clase Pasajero con nombre, DNI y número de asiento (String o int) con encapsulamiento.",
            "Definir la enumeración EstadoVuelo con valores PROGRAMADO, EN_VUELO, CANCELADO y COMPLETADO.",
            "Implementar métodos en Vuelo para añadir y eliminar pasajeros, cambiar estado, y mostrar información.",
            "Crear la clase Aerolinea que gestione una lista de vuelos y provea métodos para añadir vuelos, buscar vuelos por ruta y rango de fechas, mostrar vuelos, cancelar vuelos, eliminar pasajeros y mostrar estadísticas.",
            "Validar que un asiento no se asigne a más de un pasajero en el mismo vuelo, lanzando excepciones si es necesario.",
            "Implementar un menú interactivo para usar todas las funcionalidades."
        ],
        "pistas": [
            "Usa encapsulamiento para proteger los datos de vuelos y pasajeros.",
            "Utiliza listas (ArrayList) para gestionar colecciones de vuelos y pasajeros.",
            "Usa enumeraciones para controlar el estado de los vuelos.",
            "Maneja excepciones para casos como asientos duplicados o vuelos no encontrados.",
            "Modulariza las clases para separar responsabilidades y facilitar ampliaciones futuras."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "UX101",
                "Madrid",
                "Barcelona",
                "2025-07-01 09:30",
                "75",
                "PROGRAMADO",
                "2",
                "UX101",
                "Laura Pérez",
                "12345678Z",
                "12A",
                "3",
                "UX101",
                "EN_VUELO",
                "5",
                "10"
            ],
            "salida": [
                "--- MENÚ AEROLÍNEA ---",
                "1. Añadir vuelo",
                "2. Añadir pasajero a vuelo",
                "3. Cambiar estado de vuelo",
                "4. Consultar pasajeros de vuelo",
                "5. Mostrar vuelos",
                "6. Buscar vuelos por ruta y fecha",
                "7. Cancelar vuelo",
                "8. Eliminar pasajero",
                "9. Mostrar estadísticas",
                "10. Salir",
                "Opción: 1",
                "Código vuelo: UX101",
                "Origen: Madrid",
                "Destino: Barcelona",
                "Hora salida (yyyy-MM-dd HH:mm): 2025-07-01 09:30",
                "Duración (minutos): 75",
                "Estado: PROGRAMADO",
                "Vuelo UX101 añadido correctamente.",
                "--- MENÚ AEROLÍNEA ---",
                "Opción: 2",
                "Código vuelo: UX101",
                "Nombre pasajero: Laura Pérez",
                "DNI: 12345678Z",
                "Número asiento: 12A",
                "Pasajero añadido al vuelo UX101.",
                "--- MENÚ AEROLÍNEA ---",
                "Opción: 3",
                "Código vuelo: UX101",
                "Nuevo estado (PROGRAMADO, EN_VUELO, CANCELADO, COMPLETADO): EN_VUELO",
                "Estado actualizado.",
                "--- MENÚ AEROLÍNEA ---",
                "Opción: 5",
                "Vuelos actuales:",
                "- UX101: Madrid -> Barcelona, 09:30, 75min, Estado: EN_VUELO",
                "--- MENÚ AEROLÍNEA ---",
                "Opción: 10",
                "Adiós"
            ]
        },
        "uml": "img/uml/81.svg"
    },
    {
        "id": "82",
        "titulo": "Mini red social con herencia, comentarios y likes en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Imagina que vas a desarrollar una mini red social donde los usuarios pueden publicar contenido, comentar publicaciones y dar 'likes' a publicaciones y comentarios. La aplicación debe ser orientada a objetos en Java y reflejar la estructura de herencia entre diferentes tipos de contenido. Se deben crear publicaciones de texto, imagen y vídeo, añadir comentarios, controlar likes evitando duplicados, y mostrar toda la información.",
        "tareas": [
            "Crear clase abstracta Contenido con atributos: id, autor, fecha, número de likes y lista de usuarios que dieron like.",
            "Crear clases derivadas PublicacionTexto, PublicacionImagen y PublicacionVideo con atributos específicos.",
            "Crear clase Comentario que herede de Contenido y se asocie a una publicación.",
            "Implementar clase Usuario con nombre y lista de publicaciones.",
            "Crear clase RedSocial que gestione usuarios, publicaciones y comentarios, con métodos para crear usuarios, publicar, comentar, dar likes y mostrar información.",
            "Evitar que un usuario dé más de un like a la misma publicación o comentario.",
            "Usar polimorfismo para manejar la impresión y tratamiento común de los contenidos.",
            "Controlar errores como usuarios inexistentes o publicaciones no encontradas."
        ],
        "pistas": [
            "Usa encapsulamiento para proteger datos.",
            "Utiliza herencia y polimorfismo para modelar contenidos.",
            "Gestiona colecciones para usuarios, publicaciones y likes.",
            "Implementa métodos para evitar likes duplicados.",
            "Modulariza y separa responsabilidades en clases."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "maria123",
                "2",
                "maria123",
                "texto",
                "¡Hola a todos!",
                "3",
                "1",
                "juan89",
                "¡Bienvenida!",
                "4",
                "1",
                "juan89",
                "7",
                "1"
            ],
            "salida": [
                "--- MENÚ RED SOCIAL ---",
                "1. Crear usuario",
                "2. Crear publicación",
                "3. Comentar publicación",
                "4. Dar like a publicación",
                "5. Dar like a comentario",
                "6. Mostrar publicaciones de usuario",
                "7. Mostrar detalles publicación",
                "8. Salir",
                "Opción: 1",
                "Nombre usuario: maria123",
                "Usuario creado.",
                "Opción: 2",
                "Usuario: maria123",
                "Tipo publicación (texto, imagen, video): texto",
                "Contenido texto: ¡Hola a todos!",
                "Publicación creada con ID 1.",
                "Opción: 3",
                "ID publicación: 1",
                "Usuario: juan89",
                "Comentario: ¡Bienvenida!",
                "Comentario añadido a la publicación 1.",
                "Opción: 4",
                "ID publicación: 1",
                "Usuario: juan89",
                "Like añadido. Total likes publicación: 1",
                "Opción: 7",
                "ID publicación: 1",
                "Publicación texto por maria123",
                "Contenido: ¡Hola a todos!",
                "Likes: 1",
                "Comentarios:",
                " - juan89: ¡Bienvenida! (Likes: 0)",
                "Opción: 8",
                "Adiós"
            ]
        },
        "uml": "img/uml/82.svg"
    },
    {
        "id": "83",
        "titulo": "Sistema bancario con cuentas, préstamos y cálculo de intereses en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Estás desarrollando el backend de un sistema bancario sencillo que simula operaciones comunes: abrir cuentas corrientes y de ahorro, depositar, retirar dinero y gestionar préstamos personales con cálculo de amortización. Se deben controlar límites de saldo, calcular intereses y mostrar resúmenes financieros para los clientes, siguiendo principios de programación orientada a objetos en Java.",
        "tareas": [
            "Crear clase base abstracta CuentaBancaria con métodos depositar(), retirar() y calcularInteres().",
            "Implementar CuentaCorriente con límite de descubierto y CuentaAhorro con acumulación mensual de intereses.",
            "Crear clase Prestamo con atributos para monto, tasa anual, cuotas y método para calcular cuota mensual fija.",
            "Definir clase Cliente que contiene nombre, lista de cuentas y lista de préstamos.",
            "Crear clase Banco que gestiona clientes y ofrece menú para operaciones bancarias.",
            "Aplicar polimorfismo para calcular intereses según tipo de cuenta o préstamo.",
            "Proteger atributos sensibles mediante encapsulamiento.",
            "Controlar errores como saldos insuficientes, entradas inválidas y clientes inexistentes."
        ],
        "pistas": [
            "Usa herencia para modelar los tipos de cuentas bancarias.",
            "Aplica polimorfismo para el cálculo flexible de intereses.",
            "Gestiona colecciones para clientes, cuentas y préstamos.",
            "Implementa validaciones para evitar operaciones inválidas.",
            "Diseña un menú de consola para interacción con el usuario."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Laura Gómez",
                "2",
                "C001",
                "ahorro",
                "5000",
                "3",
                "A001",
                "1000",
                "4",
                "A001",
                "7000",
                "5",
                "C001",
                "10000",
                "7.5",
                "24",
                "6",
                "7",
                "C001",
                "8"
            ],
            "salida": [
                "=== BANCO VIRTUAL ===",
                "1. Crear cliente",
                "2. Abrir cuenta bancaria",
                "3. Depositar dinero",
                "4. Retirar dinero",
                "5. Solicitar préstamo",
                "6. Calcular intereses",
                "7. Mostrar resumen cliente",
                "8. Salir",
                "Opción: 1",
                "Nombre: Laura Gómez",
                "Cliente creado con ID: C001",
                "Opción: 2",
                "ID cliente: C001",
                "Tipo de cuenta (corriente/ahorro): ahorro",
                "Saldo inicial: 5000",
                "Cuenta de ahorro creada con ID: A001",
                "Opción: 3",
                "ID cuenta: A001",
                "Cantidad: 1000",
                "Depósito realizado. Nuevo saldo: 6000",
                "Opción: 4",
                "ID cuenta: A001",
                "Cantidad: 7000",
                "ERROR: Saldo insuficiente",
                "Opción: 5",
                "ID cliente: C001",
                "Monto: 10000",
                "Tasa interés: 7.5",
                "Cuotas: 24",
                "Préstamo creado con cuota mensual: 451.12",
                "Opción: 6",
                "Interés calculado para cuentas y préstamos.",
                "Opción: 7",
                "ID cliente: C001",
                "Resumen financiero de Laura Gómez:",
                "- Cuentas:",
                "  * A001 (Ahorro) - Saldo: 6000.0",
                "- Préstamos:",
                "  * Préstamo de 10000.0 a 7.5% anual en 24 cuotas - Cuota mensual: 451.12",
                "Opción: 8",
                "Gracias por usar Banco Virtual."
            ]
        },
        "uml": "img/uml/83.svg"
    },
    {
        "id": "84",
        "titulo": "App Dieta Tracker con gestión de usuarios y comidas en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Imagina que desarrollas una aplicación para nutricionistas y personas que quieren seguir una dieta personalizada. Permite registrar usuarios con un objetivo calórico diario, agregar comidas clasificadas por tipo (desayuno, almuerzo, cena, merienda), calcular calorías totales diarias y mostrar alertas si se supera el objetivo, aplicando principios de POO en Java.",
        "tareas": [
            "Crear clase Usuario con atributos nombre, objetivoCalorias y lista de comidas.",
            "Diseñar clase abstracta Comida con atributos nombre, calorías, fecha y método getTipo().",
            "Implementar subclases Desayuno, Almuerzo, Cena y Merienda que hereden de Comida.",
            "Crear clase DietaTracker para gestionar registro de usuarios y comidas.",
            "Implementar métodos para agregar comidas, calcular calorías totales diarias y mostrar alertas.",
            "Separar lógica de negocio y datos adecuadamente.",
            "Validar entradas para evitar datos erróneos o inconsistentes."
        ],
        "pistas": [
            "Usa herencia para modelar tipos de comida.",
            "Mantén encapsulación para proteger atributos sensibles.",
            "Usa composición: cada Usuario tiene una lista de comidas.",
            "Implementa un menú de consola interactivo para gestionar acciones.",
            "Controla errores como fechas mal formateadas y valores negativos."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Carlos Torres",
                "2200",
                "2",
                "Carlos Torres",
                "almuerzo",
                "Pasta con atún",
                "720",
                "2025-06-19",
                "2",
                "Carlos Torres",
                "merienda",
                "Yogur natural",
                "110",
                "2025-06-19",
                "3",
                "Carlos Torres",
                "2025-06-19",
                "4"
            ],
            "salida": [
                "=== DIETA TRACKER ===",
                "1. Registrar nuevo usuario",
                "2. Añadir comida",
                "3. Ver resumen diario",
                "4. Salir",
                "Opción: 1",
                "Nombre: Carlos Torres",
                "Objetivo calórico diario: 2200",
                "Usuario registrado con éxito.",
                "Opción: 2",
                "Usuario: Carlos Torres",
                "Tipo de comida (desayuno, almuerzo, etc): almuerzo",
                "Nombre del plato: Pasta con atún",
                "Calorías: 720",
                "Fecha (YYYY-MM-DD): 2025-06-19",
                "Comida registrada correctamente.",
                "Opción: 2",
                "Usuario: Carlos Torres",
                "Tipo de comida: merienda",
                "Nombre: Yogur natural",
                "Calorías: 110",
                "Fecha: 2025-06-19",
                "Comida registrada correctamente.",
                "Opción: 3",
                "Usuario: Carlos Torres",
                "Resumen de 2025-06-19",
                "Total ingerido: 830 / 2200 calorías",
                "¡Sigue así, estás dentro del objetivo!",
                "Opción: 4",
                "Gracias por usar Dieta Tracker."
            ]
        },
        "uml": "img/uml/84.svg"
    },
    {
        "id": "85",
        "titulo": "Sistema de facturación con promociones y gestión de clientes en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Desarrolla un sistema para una tienda que gestiona productos, clientes y facturas. Permite registrar productos con nombre, precio y categoría; registrar clientes normales o frecuentes; crear facturas con múltiples productos; aplicar promociones automáticas según tipo de cliente o cantidad; y mostrar el total con descuentos aplicados. Se debe usar herencia para modelar promociones y mantener encapsulación y composición para gestionar la información correctamente.",
        "tareas": [
            "Crear clase Producto con atributos nombre, precio y categoría.",
            "Crear clase Cliente con nombre, correo y tipo (normal/frecuente).",
            "Crear clase ItemFactura que contenga un producto y la cantidad comprada.",
            "Crear clase Factura con cliente, lista de items y lista de promociones aplicadas.",
            "Crear clase abstracta Promocion y subclases PromocionClienteFrecuente y PromocionPorCantidad.",
            "Implementar método para calcular el total con descuentos aplicados.",
            "Crear clase SistemaFacturacion para manejar productos, clientes, facturas y la lógica de registro y facturación.",
            "Separar claramente responsabilidades y validar datos (no negativos, tipos correctos, etc.)."
        ],
        "pistas": [
            "Usa herencia para las promociones y polimorfismo para aplicar descuentos.",
            "Usa composición para que Factura contenga varios ItemFactura.",
            "Protege atributos con encapsulamiento y proporciona métodos de acceso adecuados.",
            "Implementa un menú interactivo para facilitar el uso del sistema.",
            "Controla la entrada del usuario y errores comunes."
        ],
        "ejemplo": {
            "entrada": [
                "1",
                "Monitor LED 24\"",
                "149.99",
                "Electrónica",
                "2",
                "Ana Torres",
                "ana.torres@mail.com",
                "frecuente",
                "3",
                "Ana Torres",
                "Monitor LED 24\"",
                "2",
                "no",
                "4",
                "5"
            ],
            "salida": [
                "=== SISTEMA DE FACTURACIÓN ===",
                "1. Registrar producto",
                "2. Registrar cliente",
                "3. Crear nueva factura",
                "4. Ver historial de facturas",
                "5. Salir",
                "Opción: 1",
                "Nombre del producto: Monitor LED 24\"",
                "Precio: 149.99",
                "Categoría: Electrónica",
                "Producto registrado.",
                "Opción: 2",
                "Nombre del cliente: Ana Torres",
                "Correo: ana.torres@mail.com",
                "Tipo de cliente (normal/frecuente): frecuente",
                "Cliente registrado.",
                "Opción: 3",
                "Cliente: Ana Torres",
                "Producto: Monitor LED 24\"",
                "Cantidad: 2",
                "¿Agregar otro producto? no",
                "Factura generada:",
                "Cliente: Ana Torres (frecuente)",
                "Productos:",
                "- Monitor LED 24\" x2 → 299.98 €",
                "Promoción aplicada: 10% cliente frecuente",
                "TOTAL FINAL: 269.98 €",
                "Opción: 4",
                "Historial de facturas:",
                "Factura 1: Cliente Ana Torres, Total 269.98 €",
                "Opción: 5",
                "Gracias por usar el sistema de facturación."
            ]
        },
        "uml": "img/uml/85.svg"
    },
    {
        "id": "86",
        "titulo": "Juego de rol con personajes, habilidades y combate por turnos",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Implementa un sistema básico para un juego de rol en consola donde distintos tipos de personajes (guerreros, magos, etc.) tienen atributos como vida, ataque y defensa. Cada personaje posee una habilidad especial que puede aplicar durante un combate por turnos contra otro personaje. El sistema debe gestionar la aplicación de habilidades, modificar los estados de los personajes y determinar el ganador cuando uno queda sin vida. Usa herencia para los personajes y una interfaz para las habilidades, respetando el encapsulamiento.",
        "tareas": [
            "Crear clase abstracta Personaje con atributos nombre, vida, ataque, defensa y una habilidad.",
            "Definir método usarHabilidad(Personaje enemigo) en Personaje para que cada personaje aplique su habilidad sobre un objetivo.",
            "Crear subclases Guerrero y Mago que hereden de Personaje.",
            "Definir interfaz Habilidad con método aplicar(lanzador, objetivo).",
            "Implementar clases concretas de habilidades: GolpePoderoso, BolaDeFuego, Curacion, cada una con efectos específicos.",
            "Crear clase Combate que gestione los turnos y la lógica del enfrentamiento entre dos personajes.",
            "Crear clase principal JuegoRol que permita crear personajes, asignar habilidades y ejecutar un combate en consola.",
            "Mostrar mensajes detallados del combate y anunciar el ganador."
        ],
        "pistas": [
            "Usa polimorfismo para que diferentes habilidades apliquen efectos distintos.",
            "Controla que la vida nunca sea negativa y que las curaciones no excedan la vida inicial.",
            "Aplica encapsulamiento en los atributos de Personaje con getters y setters protegidos.",
            "Implementa un sistema sencillo de turnos alternados en la clase Combate.",
            "Considera usar Scanner para entrada de datos en consola."
        ],
        "ejemplo": {
            "entrada": [
                "Arkon",
                "Guerrero",
                "100",
                "20",
                "10",
                "Elyra",
                "Mago",
                "80",
                "15",
                "5"
            ],
            "salida": [
                "== Juego de Rol ==",
                "Creando personaje 1:",
                "Nombre: Arkon",
                "Clase: Guerrero",
                "Vida: 100",
                "Ataque: 20",
                "Defensa: 10",
                "Creando personaje 2:",
                "Nombre: Elyra",
                "Clase: Maga",
                "Vida: 80",
                "Ataque: 15",
                "Defensa: 5",
                "--- COMBATE INICIADO ---",
                "Turno de Arkon:",
                "> Usa habilidad \"Golpe Poderoso\"",
                "Elyra recibe 25 de daño (vida: 55)",
                "Turno de Elyra:",
                "> Usa habilidad \"Bola de fuego\"",
                "Arkon recibe 30 de daño (vida: 70)",
                "...",
                "¡Elyra ha sido derrotada!",
                "Ganador: Arkon"
            ]
        },
        "uml": "img/uml/86.svg"
    },
    {
        "id": "87",
        "titulo": "Sistema de gestión de residuos urbanos con contenedores y camiones",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Desarrolla un sistema para gestionar residuos urbanos en una ciudad inteligente. El sistema debe controlar diferentes tipos de contenedores según el residuo que almacenan, su ubicación y capacidad máxima, y registrar la cantidad de residuos depositados. Además, debe gestionar una flota de camiones recolectores que asignan rutas y recogen residuos de los contenedores siguiendo criterios como tipo o zona, para evitar desbordamientos y mantener la eficiencia del sistema.",
        "tareas": [
            "Crear una clase abstracta Contenedor con atributos ID, ubicación, capacidad máxima y cantidad actual.",
            "Definir métodos para llenar el contenedor, vaciarlo y obtener el porcentaje de llenado.",
            "Implementar subclases concretas como ContenedorOrganico, ContenedorVidrio y ContenedorPapel que extiendan Contenedor.",
            "Crear la clase CamionRecoleccion con atributos ID y lista de tipos de residuos que puede recolectar.",
            "Implementar métodos en CamionRecoleccion para recolectar residuos de un contenedor y asignar rutas basadas en listas de contenedores.",
            "Desarrollar la clase SistemaGestionResiduos que mantenga listas de contenedores y camiones.",
            "Implementar métodos para mostrar contenedores llenos, asignar rutas y recolecciones, y mostrar un informe general.",
            "El sistema debe alertar si un contenedor excede su capacidad máxima."
        ],
        "pistas": [
            "Usa encapsulamiento para proteger los atributos de las clases.",
            "Aplica polimorfismo para que CamionRecoleccion interactúe con cualquier tipo de contenedor sin importar su clase concreta.",
            "Considera validar que al llenar un contenedor no se supere su capacidad máxima.",
            "La asignación de rutas puede basarse en filtrar contenedores según su tipo de residuo o ubicación.",
            "Muestra información clara y detallada durante la simulación para facilitar la comprensión del estado del sistema."
        ],
        "ejemplo": {
            "entrada": [
                "Crear contenedores: VIDRIO en Calle A3, PAPEL en Calle B1, ORGÁNICO en Calle C4",
                "Llenado contenedores: VIDRIO 70%, PAPEL 95%, ORGÁNICO 40%",
                "Camiones: #12 puede recolectar VIDRIO, #13 puede recolectar PAPEL",
                "Asignar rutas y realizar recolecciones"
            ],
            "salida": [
                "== Sistema de Gestión de Residuos ==",
                "Contenedor [VIDRIO] ubicado en Calle A3 → 70% lleno.",
                "Contenedor [PAPEL] ubicado en Calle B1 → 95% lleno.",
                "Contenedor [ORGÁNICO] ubicado en Calle C4 → 40% lleno.",
                "Asignando recolecciones...",
                "Camión #12 recolecta de contenedor VIDRIO (Calle A3).",
                "Camión #13 recolecta de contenedor PAPEL (Calle B1).",
                "Contenedores llenos al 90% o más:",
                "- PAPEL (Calle B1)",
                "Informe generado."
            ]
        },
        "uml": "img/uml/87.svg"
    },
    {
        "id": "88",
        "titulo": "Sistema de gestión para una clínica psicológica",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una red de clínicas psicológicas necesita informatizar su sistema de atención y gestión de pacientes. Se debe desarrollar una aplicación orientada a objetos en Java para organizar consultas, gestionar pacientes, registrar sesiones terapéuticas y asignar psicólogos según especialidades como ansiedad, depresión o estrés laboral. El sistema permitirá llevar el historial de sesiones, asignar psicólogos y generar informes mensuales de actividad para cada profesional.",
        "tareas": [
            "Crear la clase abstracta Persona con atributos nombre, DNI y edad, y un método mostrarInformacion().",
            "Implementar la clase Paciente que hereda de Persona, con atributos para diagnóstico e historial de sesiones. Añadir métodos para agregar sesiones y consultar el historial.",
            "Implementar la clase Psicologo que hereda de Persona, con atributos para especialidades y pacientes asignados. Añadir métodos para asignar pacientes y generar informes mensuales.",
            "Crear la clase Sesion con atributos fecha, duración, tipo de terapia y observaciones, junto a un método para mostrar un resumen de la sesión.",
            "Desarrollar la clase ClinicaPsicologica que mantiene listas de pacientes, psicólogos y sesiones, y métodos para registrar sesiones, buscar psicólogos por especialidad y mostrar un resumen general."
        ],
        "pistas": [
            "Usa encapsulamiento para proteger los datos de las clases y métodos públicos para interactuar con ellos.",
            "Utiliza herencia para compartir atributos y comportamientos comunes en Persona.",
            "Gestiona la composición almacenando sesiones dentro de cada paciente.",
            "Implementa polimorfismo permitiendo usar mostrarInformacion() de Persona para pacientes y psicólogos indistintamente.",
            "Al registrar una sesión, actualiza tanto el historial del paciente como la lista global de sesiones de la clínica."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar paciente: Ana Torres (diagnóstico: Ansiedad generalizada)",
                "Registrar psicólogo: Dr. Carlos Ruiz (especialista en ansiedad y estrés)",
                "Asignar paciente a psicólogo",
                "Registrar sesión: fecha 2025-06-18, duración 50 minutos, terapia cognitivo-conductual, observaciones sobre avance"
            ],
            "salida": [
                "== Clínica Psicológica ==",
                "Nuevo paciente registrado: Ana Torres (Ansiedad generalizada)",
                "Psicólogo asignado: Dr. Carlos Ruiz (Especialista en ansiedad, estrés)",
                "Sesión creada:",
                "- Fecha: 2025-06-18",
                "- Duración: 50 minutos",
                "- Tipo de terapia: Cognitivo-conductual",
                "- Observaciones: Buen avance, se plantea reducir la frecuencia.",
                "Informe mensual para Dr. Carlos Ruiz:",
                "- Total pacientes: 8",
                "- Sesiones realizadas: 24"
            ]
        },
        "uml": "img/uml/88.svg"
    },
    {
        "id": "89",
        "titulo": "Sistema de alquiler de herramientas para ferretería",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una ferretería necesita un sistema para gestionar el alquiler de herramientas profesionales, disponible para particulares y empresas. El sistema debe controlar el estado de las herramientas, permisos especiales para alquilarlas, calcular costos según tiempo de uso, registrar devoluciones y mantener un historial de alquiler de cada herramienta.",
        "tareas": [
            "Crear la clase abstracta Herramienta con atributos nombre, código, estado, precioHora y requiereFormacion. Incluir métodos calcularPrecio(int horas), marcarEnUso() y marcarDisponible().",
            "Implementar subclases concretas Taladro, Lijadora, Sierra y Soldador, que puedan personalizar el cálculo de precio o restricciones.",
            "Crear la clase abstracta Cliente con atributos nombre, ID y tienePermisoEspecial, y método puedeAlquilar(Herramienta h).",
            "Implementar las subclases Particular y Empresa, donde Empresa pueda alquilar varias herramientas simultáneamente.",
            "Crear la clase Alquiler con atributos herramienta, cliente, fechaInicio, horasAlquiladas y precioTotal. Métodos calcularCosto() y cerrarAlquiler().",
            "Desarrollar la clase Ferreteria con listas de herramientas, clientes y alquileres, y métodos alquilarHerramienta(...), devolverHerramienta(...) y reporteHerramientas()."
        ],
        "pistas": [
            "Encapsula los atributos para proteger el estado interno de los objetos.",
            "Utiliza herencia para compartir atributos y métodos comunes en Herramienta y Cliente.",
            "Aplica polimorfismo para que calcularPrecio() pueda tener diferentes implementaciones en cada herramienta.",
            "Gestiona la disponibilidad de herramientas cambiando su estado según se alquilen o devuelvan.",
            "Al alquilar, valida que el cliente tenga permiso si la herramienta lo requiere."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar cliente: Laura Méndez (particular, sin permiso especial)",
                "Registrar herramienta: Taladro Bosch XTX1000, $4.50/hora, disponible",
                "Intentar alquilar taladro para Laura durante 5 horas"
            ],
            "salida": [
                "== Ferretería El Tornillo Feliz ==",
                "Nuevo cliente registrado: Laura Méndez (particular, sin permiso especial)",
                "Herramienta disponible: Taladro Bosch XTX1000 - $4.50/hora",
                "Intentando alquilar... ¡Taladro alquilado con éxito durante 5 horas!",
                "Costo total: $22.50",
                "Devolución registrada. Herramienta ahora disponible."
            ]
        },
        "uml": "img/uml/89.svg"
    },
    {
        "id": "90",
        "titulo": "Sistema de gestión de acceso en parque de atracciones",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Un parque de atracciones quiere informatizar su sistema de control de acceso y gestión de visitantes. Los usuarios pueden ser visitantes normales o VIP, y cada uno accede a distintas atracciones según su tipo de entrada. Se deben controlar alturas mínimas, capacidad máxima, y restringir acceso a ciertas atracciones solo para VIP. El sistema registra entradas, salidas y genera reportes de uso.",
        "tareas": [
            "Crear la clase abstracta Visitante con atributos nombre, edad, altura, tipoEntrada y método puedeAcceder(Atraccion).",
            "Implementar las subclases VisitanteNormal y VisitanteVIP, donde VisitanteVIP puede acceder a todas las atracciones incluso las restringidas.",
            "Crear la clase abstracta Atraccion con atributos nombre, capacidad, alturaMinima, estado y soloVIP, y métodos permitirAcceso(Visitante), registrarEntrada() y registrarSalida().",
            "Implementar subclases concretas MontañaRusa, CasaDelTerror, RuedaPanoramica, etc.",
            "Crear la clase Parque que contenga listas de visitantes y atracciones, y un mapa para controlar accesos activos. Métodos: registrarVisitante(...), registrarAtraccion(...), accederAtraccion(...) y mostrarEstadisticas()."
        ],
        "pistas": [
            "Encapsula atributos para mantener integridad de datos.",
            "Usa herencia para definir atributos y métodos comunes en Visitante y Atraccion.",
            "Aplica polimorfismo en los métodos que validan acceso según tipo de visitante y atracción.",
            "Controla la capacidad y el estado de cada atracción para permitir o denegar accesos.",
            "Registra las entradas y salidas para mantener actualizado el mapa de accesos."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar visitante: Julia Gómez (altura: 1.50m, entrada: NORMAL)",
                "Registrar atracción: Montaña Rusa \"Dragón\" (mínimo: 1.40m, soloVIP: false)",
                "Intentar acceso de Julia a Dragón",
                "Registrar visitante: Alex Pérez (altura: 1.35m, entrada: VIP)",
                "Intentar acceso de Alex a Dragón"
            ],
            "salida": [
                "Visitante registrado: Julia Gómez (altura: 1.50m, entrada: NORMAL)",
                "Atracción registrada: Montaña Rusa \"Dragón\" (mínimo: 1.40m, soloVIP: false)",
                "Intentando acceso de Julia a Dragón... Acceso permitido. Registro exitoso.",
                "Visitante registrado: Alex Pérez (altura: 1.35m, entrada: VIP)",
                "Acceso denegado: Alex no cumple la altura mínima (1.40m) para Dragón.",
                "Atracción más visitada del día: Dragón (35 accesos)"
            ]
        },
        "uml": "img/uml/90.svg"
    },
    {
        "id": "91",
        "titulo": "Gestión de obras digitales y coleccionistas en galería digital",
        "nivel": "dificil",
        "tipo": "Programación orientada a objetos",
        "enunciado": "En la era del arte digital y los NFTs (sin blockchain en este ejercicio), un colectivo artístico desea una aplicación para gestionar obras digitales únicas, registrar artistas, permitir a coleccionistas adquirir y revender obras, y mantener un historial completo de propiedad y exposiciones. Se deben controlar transferencias sólo si el vendedor es el propietario actual y mantener estadísticas de uso.",
        "tareas": [
            "Crear clase abstracta Obra con atributos título, año, formato, propietarioActual, historialPropietarios, exposiciones y métodos transferirPropiedad(Coleccionista), agregarExposicion(Exposicion), mostrarHistorial().",
            "Implementar subclases concretas: PinturaDigital, Animacion, InstalacionInteractiva, Escultura3D.",
            "Crear clase Artista con atributos nombre, estilo, obrasCreadas y método crearObra(...).",
            "Crear clase Coleccionista con atributos nombre, obrasPoseidas y métodos comprarObra(Obra, vendedor) y listarInventario().",
            "Crear clase Exposicion con atributos nombre, ubicacion, fechaInicio, fechaFin y método mostrarInfo().",
            "Crear clase GaleriaDigital con listas de obras, artistas y coleccionistas, y métodos para registrar entidades, transferir obras y mostrar estadísticas."
        ],
        "pistas": [
            "Asegura que la transferencia de propiedad sólo ocurra si el vendedor es el propietario actual de la obra.",
            "Mantén el historial de propietarios en orden cronológico para cada obra.",
            "Asocia exposiciones a las obras con fechas claras y controladas.",
            "Usa listas para manejar colecciones de obras, artistas y coleccionistas.",
            "Implementa polimorfismo en las subclases de Obra para futuras ampliaciones."
        ],
        "ejemplo": {
            "entrada": [
                "Registrar obra: \"Caleidoscopio Virtual\" por Nora Luna (2023)",
                "Transferir obra a Alex Gómez",
                "Transferir obra a Carla Méndez",
                "Registrar exposición: NeoMuseo de Berlín (15/03/2024 - 28/04/2024)"
            ],
            "salida": [
                "Obra registrada: \"Caleidoscopio Virtual\" por Nora Luna (2023)",
                "Obra transferida a Alex Gómez",
                "Obra transferida a Carla Méndez",
                "Obra expuesta en: NeoMuseo de Berlín (15/03/2024 - 28/04/2024)",
                "Historial de propietarios:",
                "1. Nora Luna",
                "2. Alex Gómez",
                "3. Carla Méndez",
                "Exposiciones:",
                "- NeoMuseo de Berlín (15/03/2024 - 28/04/2024)"
            ]
        },
        "uml": "img/uml/91.svg"
    },
    {
        "id": "92",
        "titulo": "Implementación de interfaz Trabajador con clases EmpleadoFijo y EmpleadoPorHoras",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Crea una interfaz Trabajador con el método calcularSalario(). Implementa dos clases EmpleadoFijo y EmpleadoPorHoras que implementen esta interfaz. El primero tiene un salario fijo mensual, el segundo cobra por hora trabajada. Programa un ejemplo de uso que imprima el salario calculado para cada empleado.",
        "tareas": [
            "Crear interfaz Trabajador con método calcularSalario(): double.",
            "Crear clase EmpleadoFijo que implemente Trabajador con atributo salarioMensual y método calcularSalario().",
            "Crear clase EmpleadoPorHoras que implemente Trabajador con atributos horasTrabajadas y pagoPorHora, y método calcularSalario().",
            "Programar un ejemplo de uso que cree instancias de ambas clases, calcule y muestre los salarios."
        ],
        "pistas": [
            "La interfaz debe definir el método calcularSalario sin implementación.",
            "EmpleadoFijo debe devolver su salarioMensual en calcularSalario.",
            "EmpleadoPorHoras debe devolver horasTrabajadas * pagoPorHora en calcularSalario.",
            "El ejemplo debe mostrar valores de salario fijo y por horas con salida clara."
        ],
        "ejemplo": {
            "entrada": [
                "Empleado fijo: Salario mensual = 2000.0",
                "Empleado por horas: Horas trabajadas = 120, Pago por hora = 15.0"
            ],
            "salida": [
                "Salario calculado empleado fijo: 2000.0",
                "Salario calculado empleado por horas: 1800.0"
            ]
        },
        "uml": "img/uml/92.svg"
    },
    {
        "id": "93",
        "titulo": "Gestión básica de contactos con clase Agenda",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Crea una clase Contacto con atributos nombre, teléfono y email. Crea una clase Agenda que almacene una lista de contactos y permita añadir nuevos contactos, buscar por nombre y mostrar todos los contactos almacenados. La búsqueda debe devolver el contacto encontrado o un mensaje claro si no existe.",
        "tareas": [
            "Crear clase Contacto con atributos nombre, telefono y email, junto con sus métodos getters y setters.",
            "Crear clase Agenda con una lista de Contacto y métodos añadirContacto(Contacto c), buscarContacto(String nombre) y mostrarContactos().",
            "Implementar búsqueda que devuelva el contacto encontrado o un mensaje si no existe.",
            "Mostrar los contactos en un formato legible al listar todos."
        ],
        "pistas": [
            "Utiliza una lista para almacenar los contactos en Agenda.",
            "La búsqueda puede recorrer la lista para encontrar coincidencias por nombre.",
            "Los métodos get/set en Contacto facilitan el acceso y modificación de atributos.",
            "Al mostrar contactos, formatea la salida para que sea clara y legible."
        ],
        "ejemplo": {
            "entrada": [
                "Añadir contacto: Juan, 666123456, juan@mail.com",
                "Buscar contacto: Juan",
                "Mostrar todos los contactos"
            ],
            "salida": [
                "Contacto añadido: Juan, 666123456, juan@mail.com",
                "Resultado búsqueda: Juan, 666123456, juan@mail.com",
                "Contactos en agenda:",
                "Juan - 666123456 - juan@mail.com",
                "Ana - 777654321 - ana@mail.com"
            ]
        },
        "uml": "img/uml/93.svg"
    },
    {
        "id": "94",
        "titulo": "Sistema de gestión de empleados y departamentos",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa necesita un sistema para gestionar sus empleados. Cada empleado tiene un nombre, ID, puesto y salario. Los empleados están asignados a un departamento que tiene un nombre y una lista de empleados. Se debe poder añadir y eliminar empleados, calcular el salario total, listar empleados y cambiar el puesto de un empleado, controlando casos de empleados inexistentes.",
        "tareas": [
            "Crear clase Empleado con atributos nombre, id, puesto y salario, incluyendo getters y setters.",
            "Crear clase Departamento con atributos nombre y lista de empleados.",
            "Implementar métodos agregarEmpleado(Empleado e), eliminarEmpleado(int id), calcularSalarioTotal(), listarEmpleados() y cambiarPuesto(int id, String puesto).",
            "Controlar que no se eliminen ni modifiquen empleados inexistentes con mensajes adecuados."
        ],
        "pistas": [
            "Usar una lista para almacenar empleados en Departamento.",
            "Para eliminar o modificar, buscar el empleado por id y validar existencia.",
            "Sumar salarios recorriendo la lista para calcular el total.",
            "Al listar empleados, mostrar toda la información relevante de cada uno."
        ],
        "ejemplo": {
            "entrada": [
                "Departamento: Informática",
                "Añadiendo empleado: Ana, ID: 101, Puesto: Programadora, Salario: 2500.0",
                "Añadiendo empleado: Luis, ID: 102, Puesto: Analista, Salario: 2300.0",
                "Listado empleados",
                "Salario total",
                "Cambiando puesto de ID 101 a Líder de proyecto",
                "Listado actualizado"
            ],
            "salida": [
                "Empleado añadido: Ana, ID: 101, Puesto: Programadora, Salario: 2500.0",
                "Empleado añadido: Luis, ID: 102, Puesto: Analista, Salario: 2300.0",
                "Listado empleados:",
                "ID: 101, Nombre: Ana, Puesto: Programadora, Salario: 2500.0",
                "ID: 102, Nombre: Luis, Puesto: Analista, Salario: 2300.0",
                "Salario total: 4800.0",
                "Puesto cambiado para empleado ID 101 a Líder de proyecto",
                "Listado actualizado:",
                "ID: 101, Nombre: Ana, Puesto: Líder de proyecto, Salario: 2500.0",
                "ID: 102, Nombre: Luis, Puesto: Analista, Salario: 2300.0"
            ]
        },
        "uml": "img/uml/94.svg"
    },
    {
        "id": "95",
        "titulo": "Sistema de gestión de rutas, autobuses y conductores en transporte público",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una empresa de transporte público desea crear un sistema orientado a objetos en Java para gestionar sus rutas, autobuses y conductores. El sistema debe permitir registrar rutas, autobuses asignados a rutas y conductores que operan cada autobús. Cada ruta tiene un código único, una lista ordenada de paradas y una duración estimada. Cada autobús tiene un número de identificación, capacidad máxima y modelo. Cada conductor tiene un ID, nombre y licencia válida. El sistema debe ofrecer funcionalidades como registrar nuevas entidades, asignar autobuses y conductores a rutas, consultar y cambiar asignaciones, mostrar rutas con sus asignaciones, consultar rutas por conductor y mostrar estadísticas básicas. Se deben implementar validaciones y manejo de excepciones para garantizar la integridad del sistema, aplicando buenas prácticas de POO para modularidad y mantenibilidad.",
        "tareas": [
            "Crear clase Ruta con atributos código (String), lista de paradas (List<String>), duración estimada (int), autobús asignado y conductor asignado.",
            "Crear clase Autobus con atributos id (String), capacidad (int) y modelo (String).",
            "Crear clase Conductor con atributos id (String), nombre (String) y licencia (String).",
            "Crear clase Transporte que gestione listas de rutas, autobuses y conductores, y sus asignaciones.",
            "Implementar métodos para registrar rutas, autobuses y conductores.",
            "Implementar métodos para asignar autobús a ruta y conductor a autobús, validando que no estén asignados simultáneamente a otra ruta o autobús.",
            "Permitir consultar asignaciones actuales de una ruta, cambiar asignaciones y mostrar todas las rutas con sus autobuses y conductores.",
            "Permitir consultar las rutas que cubre un conductor específico.",
            "Mostrar estadísticas básicas como número total de rutas, autobuses y conductores.",
            "Manejar excepciones para operaciones inválidas (como asignaciones duplicadas o consultas inexistentes)."
        ],
        "pistas": [
            "Usar listas y colecciones para almacenar las entidades y relaciones.",
            "Encapsular atributos con getters y setters para proteger los datos.",
            "Validar asignaciones para evitar que un autobús o conductor esté asignado a más de una ruta o autobús a la vez.",
            "Implementar excepciones personalizadas para manejar errores específicos.",
            "Separar responsabilidades usando diferentes clases para mejorar la modularidad.",
            "Para la lista ordenada de paradas, usa List<String> y mantén el orden de inserción."
        ],
        "ejemplo": {
            "entrada": [
                "Opción: 1",
                "Código ruta: R12",
                "Número de paradas: 3",
                "Parada 1: Estación Central",
                "Parada 2: Parque Norte",
                "Parada 3: Universidad",
                "Duración estimada (minutos): 45",
                "Opción: 4",
                "Código ruta: R12",
                "ID autobús: BUS101",
                "Opción: 5",
                "ID autobús: BUS101",
                "ID conductor: C567",
                "Opción: 6",
                "Asignaciones ruta R12:"
            ],
            "salida": [
                "Ruta registrada correctamente.",
                "Autobús asignado a la ruta R12.",
                "Conductor asignado al autobús BUS101.",
                "Autobús: BUS101, Modelo: Volvo 2020, Capacidad: 50",
                "Conductor: Juan García, Licencia: B1234567"
            ]
        },
        "uml": "img/uml/95.svg"
    },
    {
        "id": "96",
        "titulo": "Sistema de gestión de Pokémon y entrenadores con POO en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una aplicación desea modelar un sistema para gestionar una colección de Pokémon y sus entrenadores usando programación orientada a objetos en Java. Cada Pokémon tiene un nombre, tipo (como Fuego, Agua, Planta, Eléctrico, etc.), nivel y lista de movimientos. Cada movimiento tiene un nombre, tipo y poder (int). Cada entrenador tiene un nombre y un equipo de Pokémon (máximo 6). El sistema debe permitir crear Pokémon, añadir movimientos, crear entrenadores y asignarles Pokémon, consultar equipos, subir niveles, mostrar movimientos, buscar Pokémon por tipo y nivel, cambiar Pokémon de entrenador y mostrar estadísticas básicas. Se requiere buen encapsulamiento, validaciones y uso adecuado de colecciones y enumeraciones.",
        "tareas": [
            "Crear clase Pokemon con atributos nombre (String), tipo (enumeración), nivel (int) y lista de movimientos.",
            "Crear clase Movimiento con atributos nombre (String), tipo (enumeración) y poder (int).",
            "Crear clase Entrenador con atributos nombre (String) y equipo (lista de máximo 6 Pokémon).",
            "Crear clase SistemaPokemon que gestione listas de Pokémon y entrenadores y ofrezca métodos para las funcionalidades.",
            "Implementar método para añadir movimientos a un Pokémon.",
            "Validar que el equipo de un entrenador no supere los 6 Pokémon.",
            "Implementar métodos para subir nivel de un Pokémon y mostrar movimientos.",
            "Implementar búsqueda de Pokémon por tipo y nivel mínimo.",
            "Permitir cambiar un Pokémon de entrenador.",
            "Mostrar estadísticas con número total de Pokémon y entrenadores."
        ],
        "pistas": [
            "Usar enumeración TipoPokemon para los tipos de Pokémon y movimientos.",
            "Implementar composición para que un Pokémon contenga una lista de movimientos.",
            "Controlar asociaciones entre entrenadores y Pokémon mediante listas.",
            "Encapsular los datos con getters y setters adecuados.",
            "Usar colecciones como List para manejar equipos y movimientos.",
            "Validar las reglas de negocio como máximo 6 Pokémon por entrenador.",
            "Modularizar el código separando clases y responsabilidades."
        ],
        "ejemplo": {
            "entrada": [
                "--- MENÚ POKÉMON ---",
                "1. Crear Pokémon",
                "2. Añadir movimiento a Pokémon",
                "3. Crear entrenador",
                "4. Asignar Pokémon a entrenador",
                "5. Subir nivel de Pokémon",
                "6. Mostrar movimientos de Pokémon",
                "7. Buscar Pokémon por tipo y nivel",
                "8. Cambiar Pokémon de entrenador",
                "9. Mostrar estadísticas",
                "10. Salir",
                "Opción: 1",
                "Nombre Pokémon: Pikachu",
                "Tipo (FUEGO, AGUA, PLANTA, ELECTRICO): ELECTRICO",
                "Nivel: 15",
                "Opción: 2",
                "Nombre Pokémon: Pikachu",
                "Nombre movimiento: Rayo",
                "Tipo movimiento: ELECTRICO",
                "Poder: 90",
                "Opción: 4",
                "Nombre entrenador: Ash",
                "Nombre Pokémon: Pikachu"
            ],
            "salida": [
                "Pokémon Pikachu creado correctamente.",
                "Movimiento añadido a Pikachu.",
                "Pokémon Pikachu asignado a Ash."
            ]
        },
        "uml": "img/uml/96.svg"
    },
    {
        "id": "97",
        "titulo": "Sistema de gestión de ninjas y misiones en Naruto con POO en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una aplicación debe modelar un sistema para gestionar ninjas y misiones en el mundo de Naruto utilizando programación orientada a objetos en Java. Cada ninja tiene un nombre, rango (Genin, Chunin, Jonin), especialidad (Ninjutsu, Taijutsu, Genjutsu), y un nivel de chakra (int). Cada misión tiene un código único, tipo (Investigación, Combate, Escolta), dificultad y estado (Pendiente, En progreso, Completada). El sistema debe permitir crear ninjas y misiones, asignar ninjas a misiones evitando duplicados, cambiar estados, consultar asignaciones, actualizar niveles de chakra, eliminar ninjas o misiones, y mostrar estadísticas.",
        "tareas": [
            "Crear clase Ninja con atributos nombre (String), rango (enumeración), especialidad (enumeración) y nivelChakra (int).",
            "Crear clase Mision con atributos codigo (String), tipo (enumeración), dificultad (int), estado (enumeración) y lista de ninjas asignados.",
            "Crear clase SistemaNaruto que gestione listas de ninjas y misiones y métodos para las funcionalidades solicitadas.",
            "Implementar método para asignar ninjas a misiones con validación para evitar asignaciones duplicadas.",
            "Implementar métodos para cambiar estado de misiones y actualizar nivel de chakra de ninjas.",
            "Implementar consultas para obtener misiones por ninja y ninjas por misión.",
            "Implementar métodos para eliminar ninjas o misiones.",
            "Implementar método para mostrar estadísticas como número total de ninjas, misiones por estado y ninjas por rango."
        ],
        "pistas": [
            "Usar enumeraciones Rango, Especialidad, TipoMision y EstadoMision para representar los valores limitados.",
            "Gestionar asociaciones con colecciones List y validar que no haya duplicados.",
            "Encapsular datos con getters y setters y aplicar principios de POO.",
            "Utilizar manejo básico de excepciones para validar entradas y operaciones.",
            "Diseñar código modular con clases independientes y responsabilidades claras."
        ],
        "ejemplo": {
            "entrada": [
                "--- MENÚ NARUTO ---",
                "1. Crear ninja",
                "2. Crear misión",
                "3. Asignar ninja a misión",
                "4. Cambiar estado misión",
                "5. Consultar misiones de ninja",
                "6. Consultar ninjas de misión",
                "7. Actualizar nivel de chakra ninja",
                "8. Eliminar ninja o misión",
                "9. Mostrar estadísticas",
                "10. Salir",
                "Opción: 1",
                "Nombre ninja: Sasuke",
                "Rango (GENIN, CHUNIN, JONIN): JONIN",
                "Especialidad (NINJUTSU, TAIJUTSU, GENJUTSU): NINJUTSU",
                "Nivel de chakra: 95",
                "Opción: 3",
                "Código misión: M001",
                "Nombre ninja: Sasuke"
            ],
            "salida": [
                "Ninja Sasuke creado correctamente.",
                "Ninja Sasuke asignado a misión M001."
            ]
        },
        "uml": "img/uml/97.svg"
    },
    {
        "id": "98",
        "titulo": "Gestión de clanes y miembros ninja en Konoha con POO en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "La aldea de Konoha quiere desarrollar un sistema orientado a objetos en Java para gestionar los clanes ninja y sus miembros. Cada clan tiene un nombre único, una técnica especial y una lista de miembros. Cada miembro es un ninja con nombre, rango (Genin, Chunin, Jonin) y un conjunto de misiones completadas. El sistema debe permitir crear clanes, añadir miembros a clanes, registrar misiones completadas, consultar miembros de un clan, misiones de un miembro, listar clanes según rango, eliminar elementos, validar exclusividad de miembros, y mostrar estadísticas básicas.",
        "tareas": [
            "Crear clase Clan con atributos nombre (String), tecnicaEspecial (String) y miembros (List<Ninja>).",
            "Crear clase Ninja con atributos nombre (String), rango (enumeración) y misionesCompletadas (List<String>).",
            "Crear clase SistemaKonoha que gestione la lista de clanes y métodos para las funcionalidades indicadas.",
            "Implementar validación para evitar que un ninja pertenezca a más de un clan.",
            "Permitir registrar misiones completadas para cada miembro.",
            "Implementar consultas para obtener miembros de un clan y misiones completadas de un miembro.",
            "Listar clanes que tengan miembros de un rango específico.",
            "Determinar el clan con más misiones completadas en total.",
            "Permitir eliminar miembros o clanes.",
            "Mostrar estadísticas como número total de clanes, miembros y misiones registradas."
        ],
        "pistas": [
            "Usar enumeración Rango con valores GENIN, CHUNIN, JONIN.",
            "Gestionar asociaciones entre clan y miembros con listas y evitar duplicados.",
            "Encapsular atributos y usar métodos para acceder y modificar los datos.",
            "Manejar excepciones para validar operaciones no permitidas.",
            "Diseñar código modular y fácilmente extensible."
        ],
        "ejemplo": {
            "entrada": [
                "--- MENÚ KONOHA ---",
                "1. Crear clan",
                "2. Añadir miembro a clan",
                "3. Registrar misión completada por miembro",
                "4. Consultar miembros de clan",
                "5. Consultar misiones de miembro",
                "6. Listar clanes con miembros de rango específico",
                "7. Mostrar clan con más misiones completadas",
                "8. Eliminar miembro o clan",
                "9. Mostrar estadísticas",
                "10. Salir",
                "Opción: 1",
                "Nombre clan: Uchiha",
                "Técnica especial: Sharingan",
                "Opción: 2",
                "Nombre clan: Uchiha",
                "Nombre miembro: Sasuke",
                "Rango (GENIN, CHUNIN, JONIN): JONIN",
                "Opción: 3",
                "Nombre miembro: Sasuke",
                "Misión completada: Recuperar el pergamino"
            ],
            "salida": [
                "Clan Uchiha creado correctamente.",
                "Miembro Sasuke añadido al clan Uchiha.",
                "Misión registrada para Sasuke."
            ]
        },
        "uml": "img/uml/98.svg"
    },
    {
        "id": "99",
        "titulo": "Gestión de equipos y jugadores en academia de eSports con POO en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una academia de eSports desea crear un sistema orientado a objetos en Java para gestionar sus equipos y jugadores profesionales. Cada equipo tiene un nombre único, un juego en el que compite (como League of Legends, Valorant, Fortnite), un país de origen, y una lista de jugadores. Cada jugador tiene un alias, un rol (Support, Carry, Tank, Sniper) y un ranking basado en puntos obtenidos en torneos. El sistema debe permitir registrar equipos y jugadores, actualizar rankings, consultar y buscar jugadores, cambiar datos de equipos, eliminar elementos, evitar duplicados y mostrar estadísticas básicas.",
        "tareas": [
            "Crear clase Equipo con atributos nombre (String), juego (String), paisOrigen (String) y lista de jugadores (List<Jugador>).",
            "Crear clase Jugador con atributos alias (String), rol (enumeración Rol) y rankingPuntos (int).",
            "Crear clase AcademiaEsports que gestione la lista de equipos y provea métodos para registrar equipos, añadir jugadores, actualizar rankings, consultas, búsquedas, cambios de datos y eliminaciones.",
            "Implementar enumeración Rol con valores SUPPORT, CARRY, TANK y SNIPER.",
            "Validar que un jugador no pertenezca a más de un equipo al añadirlo.",
            "Implementar métodos para obtener el equipo con mayor ranking promedio y buscar jugadores por rol.",
            "Gestionar excepciones para operaciones con equipos o jugadores no existentes.",
            "Mostrar estadísticas básicas como total de equipos, jugadores y promedio de ranking por equipo."
        ],
        "pistas": [
            "Usar colecciones List para manejar equipos y jugadores.",
            "Encapsular atributos con getters y setters y aplicar buenas prácticas de POO.",
            "Validar duplicados mediante búsquedas en listas antes de añadir jugadores o equipos.",
            "Utilizar composición para que un Equipo tenga múltiples Jugadores.",
            "Crear métodos que recorran las listas para consultas y estadísticas.",
            "Implementar manejo de excepciones para entradas inválidas o elementos no encontrados."
        ],
        "ejemplo": {
            "entrada": [
                "--- MENÚ ACADEMIA ESPORTS ---",
                "1. Registrar equipo",
                "2. Añadir jugador a equipo",
                "3. Actualizar ranking de jugador",
                "4. Consultar jugadores de equipo",
                "5. Mostrar equipo con mejor ranking promedio",
                "6. Buscar jugadores por rol",
                "7. Cambiar país de equipo",
                "8. Eliminar jugador o equipo",
                "9. Mostrar estadísticas",
                "10. Salir",
                "Opción: 1",
                "Nombre equipo: Dragones Negros",
                "Juego: League of Legends",
                "País origen: España",
                "",
                "Equipo Dragones Negros registrado correctamente.",
                "",
                "Opción: 2",
                "Nombre equipo: Dragones Negros",
                "Alias jugador: Shadow",
                "Rol (SUPPORT, CARRY, TANK, SNIPER): CARRY",
                "Ranking puntos: 1500",
                "",
                "Jugador Shadow añadido al equipo Dragones Negros.",
                "",
                "Opción: 5",
                "Equipo con mejor ranking promedio: Dragones Negros (Promedio: 1500 puntos)"
            ],
            "salida": [
                "Equipo Dragones Negros registrado correctamente.",
                "Jugador Shadow añadido al equipo Dragones Negros.",
                "Equipo con mejor ranking promedio: Dragones Negros (Promedio: 1500 puntos)"
            ]
        },
        "uml": "img/uml/99.svg"
    },
    {
        "id": "100",
        "titulo": "Gestión de lenguajes de programación con POO en Java",
        "nivel": "medio",
        "tipo": "Programación orientada a objetos",
        "enunciado": "Una plataforma educativa quiere modelar un sistema para gestionar información sobre lenguajes de programación. Cada lenguaje tiene un nombre único, año de creación, un paradigma principal (enumeración) y una lista de características clave (como 'tipado estático', 'orientado a objetos', 'multiplataforma'). El sistema debe permitir crear lenguajes, añadir y eliminar características, consultar lenguajes por paradigma, buscar por rango de años, obtener resúmenes, actualizar datos, eliminar lenguajes, validar nombres únicos, contar por paradigma y estar preparado para futuras ampliaciones siguiendo buenas prácticas de programación orientada a objetos.",
        "tareas": [
            "Crear clase LenguajeProgramacion con atributos nombre (String), añoCreacion (int), paradigma (enumeración) y caracteristicas (List<String>).",
            "Crear enumeración Paradigma con valores IMPERATIVO, FUNCIONAL, ORIENTADO_OBJETOS, LOGICO, MULTIPARADIGMA.",
            "Crear clase PlataformaEducativa que gestione una colección de lenguajes y métodos para las funcionalidades indicadas.",
            "Implementar métodos para añadir y eliminar características de un lenguaje.",
            "Implementar búsqueda de lenguajes por paradigma y por rango de años.",
            "Implementar métodos para actualizar año de creación y paradigma de un lenguaje.",
            "Implementar eliminación de lenguajes por nombre.",
            "Validar que no se creen lenguajes con nombres repetidos mediante manejo de excepciones.",
            "Implementar método para contar cuántos lenguajes pertenecen a cada paradigma.",
            "Aplicar encapsulamiento, validaciones y buenas prácticas para preparar el sistema a futuras ampliaciones."
        ],
        "pistas": [
            "Utilizar colecciones para almacenar características y lenguajes.",
            "Usar enumeraciones para paradigmas.",
            "Encapsular atributos con métodos getters y setters controlados.",
            "Manejar excepciones para evitar datos duplicados o inconsistentes.",
            "Diseñar métodos claros y cohesivos para añadir, eliminar y buscar datos.",
            "Mantener código modular y fácil de extender."
        ],
        "ejemplo": {
            "entrada": [
                "PlataformaEducativa plataforma = new PlataformaEducativa();",
                "LenguajeProgramacion java = new LenguajeProgramacion(\"Java\", 1995, Paradigma.ORIENTADO_OBJETOS);",
                "java.añadirCaracteristica(\"Tipado estático\");",
                "java.añadirCaracteristica(\"Multiplataforma\");",
                "plataforma.agregarLenguaje(java);",
                "List<LenguajeProgramacion> orientadosObjetos = plataforma.buscarPorParadigma(Paradigma.ORIENTADO_OBJETOS);",
                "plataforma.eliminarLenguaje(\"Pascal\");"
            ],
            "salida": [
                "Lenguaje Java agregado correctamente.",
                "Característica 'Tipado estático' añadida a Java.",
                "Característica 'Multiplataforma' añadida a Java.",
                "Lista de lenguajes con paradigma ORIENTADO_OBJETOS obtenida.",
                "Lenguaje Pascal eliminado de la plataforma."
            ]
        },
        "uml": "img/uml/100.svg"
    }
]